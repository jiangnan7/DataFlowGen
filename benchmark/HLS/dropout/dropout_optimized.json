{
    "DFG": [
        {
            "from": [],
            "instance": "%true = arith.constant true",
            "isBlock": false,
            "line": 3,
            "name": "arith.constant0",
            "operands": [],
            "result_types": [
                "i1"
            ],
            "to": [
                "dataflow.state9"
            ]
        },
        {
            "from": [],
            "instance": "%c1 = arith.constant 1 : index",
            "isBlock": false,
            "line": 4,
            "name": "arith.constant1",
            "operands": [],
            "result_types": [
                "index"
            ],
            "to": [
                "dataflow.for35",
                "arith.addi29"
            ]
        },
        {
            "from": [],
            "instance": "%c1024 = arith.constant 1024 : index",
            "isBlock": false,
            "line": 5,
            "name": "arith.constant2",
            "operands": [],
            "result_types": [
                "index"
            ],
            "to": [
                "dataflow.for35",
                "arith.cmpi30"
            ]
        },
        {
            "from": [],
            "instance": "%c0 = arith.constant 0 : index",
            "isBlock": false,
            "line": 6,
            "name": "arith.constant3",
            "operands": [],
            "result_types": [
                "index"
            ],
            "to": [
                "dataflow.for35",
                "arith.cmpi15",
                "arith.cmpi12"
            ]
        },
        {
            "from": [],
            "instance": "%c0_i32 = arith.constant 0 : i32",
            "isBlock": false,
            "line": 7,
            "name": "arith.constant4",
            "operands": [],
            "result_types": [
                "i32"
            ],
            "to": [
                "dataflow.for35",
                "dataflow.for35",
                "dataflow.select26",
                "arith.cmpi22"
            ]
        },
        {
            "from": [],
            "instance": "%c3_i32 = arith.constant 3 : i32",
            "isBlock": false,
            "line": 8,
            "name": "arith.constant5",
            "operands": [],
            "result_types": [
                "i32"
            ],
            "to": [
                "arith.shrui16"
            ]
        },
        {
            "from": [],
            "instance": "%c1_i32 = arith.constant 1 : i32",
            "isBlock": false,
            "line": 9,
            "name": "arith.constant6",
            "operands": [],
            "result_types": [
                "i32"
            ],
            "to": [
                "arith.shrsi28",
                "arith.andi21"
            ]
        },
        {
            "from": [],
            "instance": "%c2_i32 = arith.constant 2 : i32",
            "isBlock": false,
            "line": 10,
            "name": "arith.constant7",
            "operands": [],
            "result_types": [
                "i32"
            ],
            "to": [
                "arith.muli25"
            ]
        },
        {
            "from": [],
            "instance": "%c8 = arith.constant 8 : index",
            "isBlock": false,
            "line": 11,
            "name": "arith.constant8",
            "operands": [],
            "result_types": [
                "index"
            ],
            "to": [
                "arith.addi13",
                "arith.remsi11"
            ]
        },
        {
            "from": [
                "arith.constant0"
            ],
            "instance": "dataflow.state %true, \"loop_start\" or \"null\" {Enable = \"Loop_Start\"} : i1",
            "isBlock": false,
            "line": 14,
            "name": "dataflow.state9",
            "operands": [
                "%true = arith.constant true"
            ],
            "result_types": []
        },
        {
            "from": [
                "<block argument> of type 'index' at index: 0"
            ],
            "instance": "%4 = arith.index_cast %arg2 : index to i32",
            "isBlock": false,
            "line": 17,
            "name": "arith.index_cast10",
            "operands": [
                "<block argument> of type 'index' at index: 0"
            ],
            "result_types": [
                "i32"
            ],
            "to": [
                "arith.shrui16"
            ]
        },
        {
            "from": [
                "<block argument> of type 'index' at index: 0",
                "arith.constant8"
            ],
            "instance": "%5 = arith.remsi %arg2, %c8 : index",
            "isBlock": false,
            "line": 18,
            "name": "arith.remsi11",
            "operands": [
                "<block argument> of type 'index' at index: 0",
                "%c8 = arith.constant 8 : index"
            ],
            "result_types": [
                "index"
            ],
            "to": [
                "arith.select14",
                "arith.addi13",
                "arith.cmpi12"
            ]
        },
        {
            "from": [
                "arith.remsi11",
                "arith.constant3"
            ],
            "instance": "%6 = arith.cmpi slt, %5, %c0 : index",
            "isBlock": false,
            "line": 19,
            "name": "arith.cmpi12",
            "operands": [
                "%5 = arith.remsi %arg2, %c8 : index",
                "%c0 = arith.constant 0 : index"
            ],
            "result_types": [
                "i1"
            ],
            "to": [
                "arith.select14"
            ]
        },
        {
            "from": [
                "arith.remsi11",
                "arith.constant8"
            ],
            "instance": "%7 = arith.addi %5, %c8 : index",
            "isBlock": false,
            "line": 20,
            "name": "arith.addi13",
            "operands": [
                "%5 = arith.remsi %arg2, %c8 : index",
                "%c8 = arith.constant 8 : index"
            ],
            "result_types": [
                "index"
            ],
            "to": [
                "arith.select14"
            ]
        },
        {
            "from": [
                "arith.cmpi12",
                "arith.addi13",
                "arith.remsi11"
            ],
            "instance": "%8 = arith.select %6, %7, %5 : index",
            "isBlock": false,
            "line": 21,
            "name": "arith.select14",
            "operands": [
                "%6 = arith.cmpi slt, %5, %c0 : index",
                "%7 = arith.addi %5, %c8 : index",
                "%5 = arith.remsi %arg2, %c8 : index"
            ],
            "result_types": [
                "index"
            ],
            "to": [
                "arith.cmpi15"
            ]
        },
        {
            "from": [
                "arith.select14",
                "arith.constant3"
            ],
            "instance": "%9 = arith.cmpi eq, %8, %c0 : index",
            "isBlock": false,
            "line": 22,
            "name": "arith.cmpi15",
            "operands": [
                "%8 = arith.select %6, %7, %5 : index",
                "%c0 = arith.constant 0 : index"
            ],
            "result_types": [
                "i1"
            ],
            "to": [
                "dataflow.select20"
            ]
        },
        {
            "from": [
                "arith.index_cast10",
                "arith.constant5"
            ],
            "instance": "%10 = arith.shrui %4, %c3_i32 : i32",
            "isBlock": false,
            "line": 23,
            "name": "arith.shrui16",
            "operands": [
                "%4 = arith.index_cast %arg2 : index to i32",
                "%c3_i32 = arith.constant 3 : i32"
            ],
            "result_types": [
                "i32"
            ],
            "to": [
                "arith.index_cast17"
            ]
        },
        {
            "from": [
                "arith.shrui16"
            ],
            "instance": "%11 = arith.index_cast %10 : i32 to index",
            "isBlock": false,
            "line": 24,
            "name": "arith.index_cast17",
            "operands": [
                "%10 = arith.shrui %4, %c3_i32 : i32"
            ],
            "result_types": [
                "index"
            ],
            "to": [
                "dataflow.addr18"
            ]
        },
        {
            "from": [
                "<block argument> of type 'memref<128xi32>' at index: 1",
                "arith.index_cast17"
            ],
            "instance": "%12 = dataflow.addr %arg1[%11] {memShape = [128]} : memref<128xi32>[index] -> i32",
            "isBlock": false,
            "line": 25,
            "name": "dataflow.addr18",
            "operands": [
                "<block argument> of type 'memref<128xi32>' at index: 1",
                "%11 = arith.index_cast %10 : i32 to index"
            ],
            "result_types": [
                "i32"
            ],
            "to": [
                "dataflow.load19"
            ]
        },
        {
            "from": [
                "dataflow.addr18"
            ],
            "instance": "%13 = dataflow.load %12 : i32 -> i32",
            "isBlock": false,
            "line": 26,
            "name": "dataflow.load19",
            "operands": [
                "%12 = dataflow.addr %arg1[%11] {memShape = [128]} : memref<128xi32>[index] -> i32"
            ],
            "result_types": [
                "i32"
            ],
            "to": [
                "dataflow.select20"
            ]
        },
        {
            "from": [
                "arith.cmpi15",
                "dataflow.load19",
                "<block argument> of type 'i32' at index: 2"
            ],
            "instance": "%14 = dataflow.select %9, %13, %arg4 : i32",
            "isBlock": false,
            "line": 27,
            "name": "dataflow.select20",
            "operands": [
                "%9 = arith.cmpi eq, %8, %c0 : index",
                "%13 = dataflow.load %12 : i32 -> i32",
                "<block argument> of type 'i32' at index: 2"
            ],
            "result_types": [
                "i32"
            ],
            "to": [
                "arith.shrsi28",
                "arith.andi21"
            ]
        },
        {
            "from": [
                "dataflow.select20",
                "arith.constant6"
            ],
            "instance": "%15 = arith.andi %14, %c1_i32 : i32",
            "isBlock": false,
            "line": 28,
            "name": "arith.andi21",
            "operands": [
                "%14 = dataflow.select %9, %13, %arg4 : i32",
                "%c1_i32 = arith.constant 1 : i32"
            ],
            "result_types": [
                "i32"
            ],
            "to": [
                "arith.cmpi22"
            ]
        },
        {
            "from": [
                "arith.andi21",
                "arith.constant4"
            ],
            "instance": "%16 = arith.cmpi ne, %15, %c0_i32 : i32",
            "isBlock": false,
            "line": 29,
            "name": "arith.cmpi22",
            "operands": [
                "%15 = arith.andi %14, %c1_i32 : i32",
                "%c0_i32 = arith.constant 0 : i32"
            ],
            "result_types": [
                "i1"
            ],
            "to": [
                "dataflow.select26"
            ]
        },
        {
            "from": [
                "<block argument> of type 'memref<1024xi32>' at index: 0",
                "<block argument> of type 'index' at index: 0"
            ],
            "instance": "%17 = dataflow.addr %arg0[%arg2] {memShape = [1024]} : memref<1024xi32>[index] -> i32",
            "isBlock": false,
            "line": 30,
            "name": "dataflow.addr23",
            "operands": [
                "<block argument> of type 'memref<1024xi32>' at index: 0",
                "<block argument> of type 'index' at index: 0"
            ],
            "result_types": [
                "i32"
            ],
            "to": [
                "dataflow.load24"
            ]
        },
        {
            "from": [
                "dataflow.addr23"
            ],
            "instance": "%18 = dataflow.load %17 : i32 -> i32",
            "isBlock": false,
            "line": 31,
            "name": "dataflow.load24",
            "operands": [
                "%17 = dataflow.addr %arg0[%arg2] {memShape = [1024]} : memref<1024xi32>[index] -> i32"
            ],
            "result_types": [
                "i32"
            ],
            "to": [
                "arith.muli25"
            ]
        },
        {
            "from": [
                "dataflow.load24",
                "arith.constant7"
            ],
            "instance": "%19 = arith.muli %18, %c2_i32 : i32",
            "isBlock": false,
            "line": 32,
            "name": "arith.muli25",
            "operands": [
                "%18 = dataflow.load %17 : i32 -> i32",
                "%c2_i32 = arith.constant 2 : i32"
            ],
            "result_types": [
                "i32"
            ],
            "to": [
                "dataflow.select26"
            ]
        },
        {
            "from": [
                "arith.cmpi22",
                "arith.muli25",
                "arith.constant4"
            ],
            "instance": "%20 = dataflow.select %16, %19, %c0_i32 : i32",
            "isBlock": false,
            "line": 33,
            "name": "dataflow.select26",
            "operands": [
                "%16 = arith.cmpi ne, %15, %c0_i32 : i32",
                "%19 = arith.muli %18, %c2_i32 : i32",
                "%c0_i32 = arith.constant 0 : i32"
            ],
            "result_types": [
                "i32"
            ],
            "to": [
                "arith.addi27"
            ]
        },
        {
            "from": [
                "<block argument> of type 'i32' at index: 1",
                "dataflow.select26"
            ],
            "instance": "%21 = arith.addi %arg3, %20 : i32",
            "isBlock": false,
            "line": 34,
            "name": "arith.addi27",
            "operands": [
                "<block argument> of type 'i32' at index: 1",
                "%20 = dataflow.select %16, %19, %c0_i32 : i32"
            ],
            "result_types": [
                "i32"
            ],
            "to": [
                "dataflow.yield32"
            ]
        },
        {
            "from": [
                "dataflow.select20",
                "arith.constant6"
            ],
            "instance": "%22 = arith.shrsi %14, %c1_i32 : i32",
            "isBlock": false,
            "line": 35,
            "name": "arith.shrsi28",
            "operands": [
                "%14 = dataflow.select %9, %13, %arg4 : i32",
                "%c1_i32 = arith.constant 1 : i32"
            ],
            "result_types": [
                "i32"
            ],
            "to": [
                "dataflow.yield32"
            ]
        },
        {
            "from": [
                "<block argument> of type 'index' at index: 0",
                "arith.constant1"
            ],
            "instance": "%23 = arith.addi %arg2, %c1 {Exe = \"Loop\"} : index",
            "isBlock": false,
            "line": 36,
            "name": "arith.addi29",
            "operands": [
                "<block argument> of type 'index' at index: 0",
                "%c1 = arith.constant 1 : index"
            ],
            "result_types": [
                "index"
            ],
            "to": [
                "arith.cmpi30"
            ]
        },
        {
            "from": [
                "arith.addi29",
                "arith.constant2"
            ],
            "instance": "%24 = arith.cmpi eq, %23, %c1024 {Exe = \"Loop\"} : index",
            "isBlock": false,
            "line": 37,
            "name": "arith.cmpi30",
            "operands": [
                "%23 = arith.addi %arg2, %c1 {Exe = \"Loop\"} : index",
                "%c1024 = arith.constant 1024 : index"
            ],
            "result_types": [
                "i1"
            ],
            "to": [
                "dataflow.state31"
            ]
        },
        {
            "from": [
                "arith.cmpi30"
            ],
            "instance": "dataflow.state %24, \"loop_exit\" or \"loop_back\" {Exe = \"Loop\"} : i1",
            "isBlock": false,
            "line": 38,
            "name": "dataflow.state31",
            "operands": [
                "%24 = arith.cmpi eq, %23, %c1024 {Exe = \"Loop\"} : index"
            ],
            "result_types": []
        },
        {
            "from": [
                "arith.addi27",
                "arith.shrsi28"
            ],
            "instance": "dataflow.yield {execution_block = 1 : i32} %21, %22 : i32, i32",
            "isBlock": false,
            "line": 39,
            "name": "dataflow.yield32",
            "operands": [
                "%21 = arith.addi %arg3, %20 : i32",
                "%22 = arith.shrsi %14, %c1_i32 : i32"
            ],
            "result_types": []
        },
        {
            "from": [],
            "instance": "%3:2 = dataflow.execution : i32, i32 {\n  %4 = arith.index_cast %arg2 : index to i32\n  %5 = arith.remsi %arg2, %c8 : index\n  %6 = arith.cmpi slt, %5, %c0 : index\n  %7 = arith.addi %5, %c8 : index\n  %8 = arith.select %6, %7, %5 : index\n  %9 = arith.cmpi eq, %8, %c0 : index\n  %10 = arith.shrui %4, %c3_i32 : i32\n  %11 = arith.index_cast %10 : i32 to index\n  %12 = dataflow.addr %arg1[%11] {memShape = [128]} : memref<128xi32>[index] -> i32\n  %13 = dataflow.load %12 : i32 -> i32\n  %14 = dataflow.select %9, %13, %arg4 : i32\n  %15 = arith.andi %14, %c1_i32 : i32\n  %16 = arith.cmpi ne, %15, %c0_i32 : i32\n  %17 = dataflow.addr %arg0[%arg2] {memShape = [1024]} : memref<1024xi32>[index] -> i32\n  %18 = dataflow.load %17 : i32 -> i32\n  %19 = arith.muli %18, %c2_i32 : i32\n  %20 = dataflow.select %16, %19, %c0_i32 : i32\n  %21 = arith.addi %arg3, %20 : i32\n  %22 = arith.shrsi %14, %c1_i32 : i32\n  %23 = arith.addi %arg2, %c1 {Exe = \"Loop\"} : index\n  %24 = arith.cmpi eq, %23, %c1024 {Exe = \"Loop\"} : index\n  dataflow.state %24, \"loop_exit\" or \"loop_back\" {Exe = \"Loop\"} : i1\n  dataflow.yield {execution_block = 1 : i32} %21, %22 : i32, i32\n}",
            "isBlock": true,
            "line": 16,
            "name": "dataflow.execution33",
            "operands": [],
            "regions": [
                [
                    {
                        "operations": [
                            "%4 = arith.index_cast %arg2 : index to i32",
                            "%5 = arith.remsi %arg2, %c8 : index",
                            "%6 = arith.cmpi slt, %5, %c0 : index",
                            "%7 = arith.addi %5, %c8 : index",
                            "%8 = arith.select %6, %7, %5 : index",
                            "%9 = arith.cmpi eq, %8, %c0 : index",
                            "%10 = arith.shrui %4, %c3_i32 : i32",
                            "%11 = arith.index_cast %10 : i32 to index",
                            "%12 = dataflow.addr %arg1[%11] {memShape = [128]} : memref<128xi32>[index] -> i32",
                            "%13 = dataflow.load %12 : i32 -> i32",
                            "%14 = dataflow.select %9, %13, %arg4 : i32",
                            "%15 = arith.andi %14, %c1_i32 : i32",
                            "%16 = arith.cmpi ne, %15, %c0_i32 : i32",
                            "%17 = dataflow.addr %arg0[%arg2] {memShape = [1024]} : memref<1024xi32>[index] -> i32",
                            "%18 = dataflow.load %17 : i32 -> i32",
                            "%19 = arith.muli %18, %c2_i32 : i32",
                            "%20 = dataflow.select %16, %19, %c0_i32 : i32",
                            "%21 = arith.addi %arg3, %20 : i32",
                            "%22 = arith.shrsi %14, %c1_i32 : i32",
                            "%23 = arith.addi %arg2, %c1 {Exe = \"Loop\"} : index",
                            "%24 = arith.cmpi eq, %23, %c1024 {Exe = \"Loop\"} : index",
                            "dataflow.state %24, \"loop_exit\" or \"loop_back\" {Exe = \"Loop\"} : i1",
                            "dataflow.yield {execution_block = 1 : i32} %21, %22 : i32, i32"
                        ]
                    }
                ]
            ],
            "result_types": [
                "i32",
                "i32"
            ],
            "to": [
                "dataflow.yield34",
                "dataflow.yield34"
            ]
        },
        {
            "from": [
                "dataflow.execution33",
                "dataflow.execution33"
            ],
            "instance": "dataflow.yield %3#0, %3#1 : i32, i32",
            "isBlock": false,
            "line": 41,
            "name": "dataflow.yield34",
            "operands": [
                "%3:2 = dataflow.execution : i32, i32 {\n  %4 = arith.index_cast %arg2 : index to i32\n  %5 = arith.remsi %arg2, %c8 : index\n  %6 = arith.cmpi slt, %5, %c0 : index\n  %7 = arith.addi %5, %c8 : index\n  %8 = arith.select %6, %7, %5 : index\n  %9 = arith.cmpi eq, %8, %c0 : index\n  %10 = arith.shrui %4, %c3_i32 : i32\n  %11 = arith.index_cast %10 : i32 to index\n  %12 = dataflow.addr %arg1[%11] {memShape = [128]} : memref<128xi32>[index] -> i32\n  %13 = dataflow.load %12 : i32 -> i32\n  %14 = dataflow.select %9, %13, %arg4 : i32\n  %15 = arith.andi %14, %c1_i32 : i32\n  %16 = arith.cmpi ne, %15, %c0_i32 : i32\n  %17 = dataflow.addr %arg0[%arg2] {memShape = [1024]} : memref<1024xi32>[index] -> i32\n  %18 = dataflow.load %17 : i32 -> i32\n  %19 = arith.muli %18, %c2_i32 : i32\n  %20 = dataflow.select %16, %19, %c0_i32 : i32\n  %21 = arith.addi %arg3, %20 : i32\n  %22 = arith.shrsi %14, %c1_i32 : i32\n  %23 = arith.addi %arg2, %c1 {Exe = \"Loop\"} : index\n  %24 = arith.cmpi eq, %23, %c1024 {Exe = \"Loop\"} : index\n  dataflow.state %24, \"loop_exit\" or \"loop_back\" {Exe = \"Loop\"} : i1\n  dataflow.yield {execution_block = 1 : i32} %21, %22 : i32, i32\n}",
                "%3:2 = dataflow.execution : i32, i32 {\n  %4 = arith.index_cast %arg2 : index to i32\n  %5 = arith.remsi %arg2, %c8 : index\n  %6 = arith.cmpi slt, %5, %c0 : index\n  %7 = arith.addi %5, %c8 : index\n  %8 = arith.select %6, %7, %5 : index\n  %9 = arith.cmpi eq, %8, %c0 : index\n  %10 = arith.shrui %4, %c3_i32 : i32\n  %11 = arith.index_cast %10 : i32 to index\n  %12 = dataflow.addr %arg1[%11] {memShape = [128]} : memref<128xi32>[index] -> i32\n  %13 = dataflow.load %12 : i32 -> i32\n  %14 = dataflow.select %9, %13, %arg4 : i32\n  %15 = arith.andi %14, %c1_i32 : i32\n  %16 = arith.cmpi ne, %15, %c0_i32 : i32\n  %17 = dataflow.addr %arg0[%arg2] {memShape = [1024]} : memref<1024xi32>[index] -> i32\n  %18 = dataflow.load %17 : i32 -> i32\n  %19 = arith.muli %18, %c2_i32 : i32\n  %20 = dataflow.select %16, %19, %c0_i32 : i32\n  %21 = arith.addi %arg3, %20 : i32\n  %22 = arith.shrsi %14, %c1_i32 : i32\n  %23 = arith.addi %arg2, %c1 {Exe = \"Loop\"} : index\n  %24 = arith.cmpi eq, %23, %c1024 {Exe = \"Loop\"} : index\n  dataflow.state %24, \"loop_exit\" or \"loop_back\" {Exe = \"Loop\"} : i1\n  dataflow.yield {execution_block = 1 : i32} %21, %22 : i32, i32\n}"
            ],
            "result_types": []
        },
        {
            "from": [
                "arith.constant3",
                "arith.constant2",
                "arith.constant1",
                "arith.constant4",
                "arith.constant4"
            ],
            "instance": "%2:2 = dataflow.for %arg2 = %c0 to %c1024 step %c1 iter_args(%arg3 = %c0_i32, %arg4 = %c0_i32) -> (i32, i32) {\n  %3:2 = dataflow.execution : i32, i32 {\n    %4 = arith.index_cast %arg2 : index to i32\n    %5 = arith.remsi %arg2, %c8 : index\n    %6 = arith.cmpi slt, %5, %c0 : index\n    %7 = arith.addi %5, %c8 : index\n    %8 = arith.select %6, %7, %5 : index\n    %9 = arith.cmpi eq, %8, %c0 : index\n    %10 = arith.shrui %4, %c3_i32 : i32\n    %11 = arith.index_cast %10 : i32 to index\n    %12 = dataflow.addr %arg1[%11] {memShape = [128]} : memref<128xi32>[index] -> i32\n    %13 = dataflow.load %12 : i32 -> i32\n    %14 = dataflow.select %9, %13, %arg4 : i32\n    %15 = arith.andi %14, %c1_i32 : i32\n    %16 = arith.cmpi ne, %15, %c0_i32 : i32\n    %17 = dataflow.addr %arg0[%arg2] {memShape = [1024]} : memref<1024xi32>[index] -> i32\n    %18 = dataflow.load %17 : i32 -> i32\n    %19 = arith.muli %18, %c2_i32 : i32\n    %20 = dataflow.select %16, %19, %c0_i32 : i32\n    %21 = arith.addi %arg3, %20 : i32\n    %22 = arith.shrsi %14, %c1_i32 : i32\n    %23 = arith.addi %arg2, %c1 {Exe = \"Loop\"} : index\n    %24 = arith.cmpi eq, %23, %c1024 {Exe = \"Loop\"} : index\n    dataflow.state %24, \"loop_exit\" or \"loop_back\" {Exe = \"Loop\"} : i1\n    dataflow.yield {execution_block = 1 : i32} %21, %22 : i32, i32\n  }\n  dataflow.yield %3#0, %3#1 : i32, i32\n} {Loop_Band = 0 : i32, Loop_Level = 0 : i32}",
            "isBlock": true,
            "line": 15,
            "name": "dataflow.for35",
            "operands": [
                "%c0 = arith.constant 0 : index",
                "%c1024 = arith.constant 1024 : index",
                "%c1 = arith.constant 1 : index",
                "%c0_i32 = arith.constant 0 : i32",
                "%c0_i32 = arith.constant 0 : i32"
            ],
            "regions": [
                [
                    {
                        "operations": [
                            "%3:2 = dataflow.execution : i32, i32 {\n  %4 = arith.index_cast %arg2 : index to i32\n  %5 = arith.remsi %arg2, %c8 : index\n  %6 = arith.cmpi slt, %5, %c0 : index\n  %7 = arith.addi %5, %c8 : index\n  %8 = arith.select %6, %7, %5 : index\n  %9 = arith.cmpi eq, %8, %c0 : index\n  %10 = arith.shrui %4, %c3_i32 : i32\n  %11 = arith.index_cast %10 : i32 to index\n  %12 = dataflow.addr %arg1[%11] {memShape = [128]} : memref<128xi32>[index] -> i32\n  %13 = dataflow.load %12 : i32 -> i32\n  %14 = dataflow.select %9, %13, %arg4 : i32\n  %15 = arith.andi %14, %c1_i32 : i32\n  %16 = arith.cmpi ne, %15, %c0_i32 : i32\n  %17 = dataflow.addr %arg0[%arg2] {memShape = [1024]} : memref<1024xi32>[index] -> i32\n  %18 = dataflow.load %17 : i32 -> i32\n  %19 = arith.muli %18, %c2_i32 : i32\n  %20 = dataflow.select %16, %19, %c0_i32 : i32\n  %21 = arith.addi %arg3, %20 : i32\n  %22 = arith.shrsi %14, %c1_i32 : i32\n  %23 = arith.addi %arg2, %c1 {Exe = \"Loop\"} : index\n  %24 = arith.cmpi eq, %23, %c1024 {Exe = \"Loop\"} : index\n  dataflow.state %24, \"loop_exit\" or \"loop_back\" {Exe = \"Loop\"} : i1\n  dataflow.yield {execution_block = 1 : i32} %21, %22 : i32, i32\n}",
                            "dataflow.yield %3#0, %3#1 : i32, i32"
                        ]
                    }
                ]
            ],
            "result_types": [
                "i32",
                "i32"
            ],
            "to": [
                "dataflow.yield36"
            ]
        },
        {
            "from": [
                "dataflow.for35"
            ],
            "instance": "dataflow.yield %2#0 : i32",
            "isBlock": false,
            "line": 43,
            "name": "dataflow.yield36",
            "operands": [
                "%2:2 = dataflow.for %arg2 = %c0 to %c1024 step %c1 iter_args(%arg3 = %c0_i32, %arg4 = %c0_i32) -> (i32, i32) {\n  %3:2 = dataflow.execution : i32, i32 {\n    %4 = arith.index_cast %arg2 : index to i32\n    %5 = arith.remsi %arg2, %c8 : index\n    %6 = arith.cmpi slt, %5, %c0 : index\n    %7 = arith.addi %5, %c8 : index\n    %8 = arith.select %6, %7, %5 : index\n    %9 = arith.cmpi eq, %8, %c0 : index\n    %10 = arith.shrui %4, %c3_i32 : i32\n    %11 = arith.index_cast %10 : i32 to index\n    %12 = dataflow.addr %arg1[%11] {memShape = [128]} : memref<128xi32>[index] -> i32\n    %13 = dataflow.load %12 : i32 -> i32\n    %14 = dataflow.select %9, %13, %arg4 : i32\n    %15 = arith.andi %14, %c1_i32 : i32\n    %16 = arith.cmpi ne, %15, %c0_i32 : i32\n    %17 = dataflow.addr %arg0[%arg2] {memShape = [1024]} : memref<1024xi32>[index] -> i32\n    %18 = dataflow.load %17 : i32 -> i32\n    %19 = arith.muli %18, %c2_i32 : i32\n    %20 = dataflow.select %16, %19, %c0_i32 : i32\n    %21 = arith.addi %arg3, %20 : i32\n    %22 = arith.shrsi %14, %c1_i32 : i32\n    %23 = arith.addi %arg2, %c1 {Exe = \"Loop\"} : index\n    %24 = arith.cmpi eq, %23, %c1024 {Exe = \"Loop\"} : index\n    dataflow.state %24, \"loop_exit\" or \"loop_back\" {Exe = \"Loop\"} : i1\n    dataflow.yield {execution_block = 1 : i32} %21, %22 : i32, i32\n  }\n  dataflow.yield %3#0, %3#1 : i32, i32\n} {Loop_Band = 0 : i32, Loop_Level = 0 : i32}"
            ],
            "result_types": []
        },
        {
            "from": [],
            "instance": "%1 = dataflow.task : i32 {\n  dataflow.state %true, \"loop_start\" or \"null\" {Enable = \"Loop_Start\"} : i1\n  %2:2 = dataflow.for %arg2 = %c0 to %c1024 step %c1 iter_args(%arg3 = %c0_i32, %arg4 = %c0_i32) -> (i32, i32) {\n    %3:2 = dataflow.execution : i32, i32 {\n      %4 = arith.index_cast %arg2 : index to i32\n      %5 = arith.remsi %arg2, %c8 : index\n      %6 = arith.cmpi slt, %5, %c0 : index\n      %7 = arith.addi %5, %c8 : index\n      %8 = arith.select %6, %7, %5 : index\n      %9 = arith.cmpi eq, %8, %c0 : index\n      %10 = arith.shrui %4, %c3_i32 : i32\n      %11 = arith.index_cast %10 : i32 to index\n      %12 = dataflow.addr %arg1[%11] {memShape = [128]} : memref<128xi32>[index] -> i32\n      %13 = dataflow.load %12 : i32 -> i32\n      %14 = dataflow.select %9, %13, %arg4 : i32\n      %15 = arith.andi %14, %c1_i32 : i32\n      %16 = arith.cmpi ne, %15, %c0_i32 : i32\n      %17 = dataflow.addr %arg0[%arg2] {memShape = [1024]} : memref<1024xi32>[index] -> i32\n      %18 = dataflow.load %17 : i32 -> i32\n      %19 = arith.muli %18, %c2_i32 : i32\n      %20 = dataflow.select %16, %19, %c0_i32 : i32\n      %21 = arith.addi %arg3, %20 : i32\n      %22 = arith.shrsi %14, %c1_i32 : i32\n      %23 = arith.addi %arg2, %c1 {Exe = \"Loop\"} : index\n      %24 = arith.cmpi eq, %23, %c1024 {Exe = \"Loop\"} : index\n      dataflow.state %24, \"loop_exit\" or \"loop_back\" {Exe = \"Loop\"} : i1\n      dataflow.yield {execution_block = 1 : i32} %21, %22 : i32, i32\n    }\n    dataflow.yield %3#0, %3#1 : i32, i32\n  } {Loop_Band = 0 : i32, Loop_Level = 0 : i32}\n  dataflow.yield %2#0 : i32\n}",
            "isBlock": true,
            "line": 13,
            "name": "dataflow.task37",
            "operands": [],
            "regions": [
                [
                    {
                        "operations": [
                            "dataflow.state %true, \"loop_start\" or \"null\" {Enable = \"Loop_Start\"} : i1",
                            "%2:2 = dataflow.for %arg2 = %c0 to %c1024 step %c1 iter_args(%arg3 = %c0_i32, %arg4 = %c0_i32) -> (i32, i32) {\n  %3:2 = dataflow.execution : i32, i32 {\n    %4 = arith.index_cast %arg2 : index to i32\n    %5 = arith.remsi %arg2, %c8 : index\n    %6 = arith.cmpi slt, %5, %c0 : index\n    %7 = arith.addi %5, %c8 : index\n    %8 = arith.select %6, %7, %5 : index\n    %9 = arith.cmpi eq, %8, %c0 : index\n    %10 = arith.shrui %4, %c3_i32 : i32\n    %11 = arith.index_cast %10 : i32 to index\n    %12 = dataflow.addr %arg1[%11] {memShape = [128]} : memref<128xi32>[index] -> i32\n    %13 = dataflow.load %12 : i32 -> i32\n    %14 = dataflow.select %9, %13, %arg4 : i32\n    %15 = arith.andi %14, %c1_i32 : i32\n    %16 = arith.cmpi ne, %15, %c0_i32 : i32\n    %17 = dataflow.addr %arg0[%arg2] {memShape = [1024]} : memref<1024xi32>[index] -> i32\n    %18 = dataflow.load %17 : i32 -> i32\n    %19 = arith.muli %18, %c2_i32 : i32\n    %20 = dataflow.select %16, %19, %c0_i32 : i32\n    %21 = arith.addi %arg3, %20 : i32\n    %22 = arith.shrsi %14, %c1_i32 : i32\n    %23 = arith.addi %arg2, %c1 {Exe = \"Loop\"} : index\n    %24 = arith.cmpi eq, %23, %c1024 {Exe = \"Loop\"} : index\n    dataflow.state %24, \"loop_exit\" or \"loop_back\" {Exe = \"Loop\"} : i1\n    dataflow.yield {execution_block = 1 : i32} %21, %22 : i32, i32\n  }\n  dataflow.yield %3#0, %3#1 : i32, i32\n} {Loop_Band = 0 : i32, Loop_Level = 0 : i32}",
                            "dataflow.yield %2#0 : i32"
                        ]
                    }
                ]
            ],
            "result_types": [
                "i32"
            ],
            "to": [
                "dataflow.yield38"
            ]
        },
        {
            "from": [
                "dataflow.task37"
            ],
            "instance": "dataflow.yield %1 : i32",
            "isBlock": false,
            "line": 45,
            "name": "dataflow.yield38",
            "operands": [
                "%1 = dataflow.task : i32 {\n  dataflow.state %true, \"loop_start\" or \"null\" {Enable = \"Loop_Start\"} : i1\n  %2:2 = dataflow.for %arg2 = %c0 to %c1024 step %c1 iter_args(%arg3 = %c0_i32, %arg4 = %c0_i32) -> (i32, i32) {\n    %3:2 = dataflow.execution : i32, i32 {\n      %4 = arith.index_cast %arg2 : index to i32\n      %5 = arith.remsi %arg2, %c8 : index\n      %6 = arith.cmpi slt, %5, %c0 : index\n      %7 = arith.addi %5, %c8 : index\n      %8 = arith.select %6, %7, %5 : index\n      %9 = arith.cmpi eq, %8, %c0 : index\n      %10 = arith.shrui %4, %c3_i32 : i32\n      %11 = arith.index_cast %10 : i32 to index\n      %12 = dataflow.addr %arg1[%11] {memShape = [128]} : memref<128xi32>[index] -> i32\n      %13 = dataflow.load %12 : i32 -> i32\n      %14 = dataflow.select %9, %13, %arg4 : i32\n      %15 = arith.andi %14, %c1_i32 : i32\n      %16 = arith.cmpi ne, %15, %c0_i32 : i32\n      %17 = dataflow.addr %arg0[%arg2] {memShape = [1024]} : memref<1024xi32>[index] -> i32\n      %18 = dataflow.load %17 : i32 -> i32\n      %19 = arith.muli %18, %c2_i32 : i32\n      %20 = dataflow.select %16, %19, %c0_i32 : i32\n      %21 = arith.addi %arg3, %20 : i32\n      %22 = arith.shrsi %14, %c1_i32 : i32\n      %23 = arith.addi %arg2, %c1 {Exe = \"Loop\"} : index\n      %24 = arith.cmpi eq, %23, %c1024 {Exe = \"Loop\"} : index\n      dataflow.state %24, \"loop_exit\" or \"loop_back\" {Exe = \"Loop\"} : i1\n      dataflow.yield {execution_block = 1 : i32} %21, %22 : i32, i32\n    }\n    dataflow.yield %3#0, %3#1 : i32, i32\n  } {Loop_Band = 0 : i32, Loop_Level = 0 : i32}\n  dataflow.yield %2#0 : i32\n}"
            ],
            "result_types": []
        },
        {
            "from": [],
            "instance": "%0 = dataflow.launch : i32 {\n  %1 = dataflow.task : i32 {\n    dataflow.state %true, \"loop_start\" or \"null\" {Enable = \"Loop_Start\"} : i1\n    %2:2 = dataflow.for %arg2 = %c0 to %c1024 step %c1 iter_args(%arg3 = %c0_i32, %arg4 = %c0_i32) -> (i32, i32) {\n      %3:2 = dataflow.execution : i32, i32 {\n        %4 = arith.index_cast %arg2 : index to i32\n        %5 = arith.remsi %arg2, %c8 : index\n        %6 = arith.cmpi slt, %5, %c0 : index\n        %7 = arith.addi %5, %c8 : index\n        %8 = arith.select %6, %7, %5 : index\n        %9 = arith.cmpi eq, %8, %c0 : index\n        %10 = arith.shrui %4, %c3_i32 : i32\n        %11 = arith.index_cast %10 : i32 to index\n        %12 = dataflow.addr %arg1[%11] {memShape = [128]} : memref<128xi32>[index] -> i32\n        %13 = dataflow.load %12 : i32 -> i32\n        %14 = dataflow.select %9, %13, %arg4 : i32\n        %15 = arith.andi %14, %c1_i32 : i32\n        %16 = arith.cmpi ne, %15, %c0_i32 : i32\n        %17 = dataflow.addr %arg0[%arg2] {memShape = [1024]} : memref<1024xi32>[index] -> i32\n        %18 = dataflow.load %17 : i32 -> i32\n        %19 = arith.muli %18, %c2_i32 : i32\n        %20 = dataflow.select %16, %19, %c0_i32 : i32\n        %21 = arith.addi %arg3, %20 : i32\n        %22 = arith.shrsi %14, %c1_i32 : i32\n        %23 = arith.addi %arg2, %c1 {Exe = \"Loop\"} : index\n        %24 = arith.cmpi eq, %23, %c1024 {Exe = \"Loop\"} : index\n        dataflow.state %24, \"loop_exit\" or \"loop_back\" {Exe = \"Loop\"} : i1\n        dataflow.yield {execution_block = 1 : i32} %21, %22 : i32, i32\n      }\n      dataflow.yield %3#0, %3#1 : i32, i32\n    } {Loop_Band = 0 : i32, Loop_Level = 0 : i32}\n    dataflow.yield %2#0 : i32\n  }\n  dataflow.yield %1 : i32\n}",
            "isBlock": true,
            "line": 12,
            "name": "dataflow.launch39",
            "operands": [],
            "regions": [
                [
                    {
                        "operations": [
                            "%1 = dataflow.task : i32 {\n  dataflow.state %true, \"loop_start\" or \"null\" {Enable = \"Loop_Start\"} : i1\n  %2:2 = dataflow.for %arg2 = %c0 to %c1024 step %c1 iter_args(%arg3 = %c0_i32, %arg4 = %c0_i32) -> (i32, i32) {\n    %3:2 = dataflow.execution : i32, i32 {\n      %4 = arith.index_cast %arg2 : index to i32\n      %5 = arith.remsi %arg2, %c8 : index\n      %6 = arith.cmpi slt, %5, %c0 : index\n      %7 = arith.addi %5, %c8 : index\n      %8 = arith.select %6, %7, %5 : index\n      %9 = arith.cmpi eq, %8, %c0 : index\n      %10 = arith.shrui %4, %c3_i32 : i32\n      %11 = arith.index_cast %10 : i32 to index\n      %12 = dataflow.addr %arg1[%11] {memShape = [128]} : memref<128xi32>[index] -> i32\n      %13 = dataflow.load %12 : i32 -> i32\n      %14 = dataflow.select %9, %13, %arg4 : i32\n      %15 = arith.andi %14, %c1_i32 : i32\n      %16 = arith.cmpi ne, %15, %c0_i32 : i32\n      %17 = dataflow.addr %arg0[%arg2] {memShape = [1024]} : memref<1024xi32>[index] -> i32\n      %18 = dataflow.load %17 : i32 -> i32\n      %19 = arith.muli %18, %c2_i32 : i32\n      %20 = dataflow.select %16, %19, %c0_i32 : i32\n      %21 = arith.addi %arg3, %20 : i32\n      %22 = arith.shrsi %14, %c1_i32 : i32\n      %23 = arith.addi %arg2, %c1 {Exe = \"Loop\"} : index\n      %24 = arith.cmpi eq, %23, %c1024 {Exe = \"Loop\"} : index\n      dataflow.state %24, \"loop_exit\" or \"loop_back\" {Exe = \"Loop\"} : i1\n      dataflow.yield {execution_block = 1 : i32} %21, %22 : i32, i32\n    }\n    dataflow.yield %3#0, %3#1 : i32, i32\n  } {Loop_Band = 0 : i32, Loop_Level = 0 : i32}\n  dataflow.yield %2#0 : i32\n}",
                            "dataflow.yield %1 : i32"
                        ]
                    }
                ]
            ],
            "result_types": [
                "i32"
            ],
            "to": [
                "func.return40"
            ]
        },
        {
            "from": [
                "dataflow.launch39"
            ],
            "instance": "func.return %0 : i32",
            "isBlock": false,
            "line": 47,
            "name": "func.return40",
            "operands": [
                "%0 = dataflow.launch : i32 {\n  %1 = dataflow.task : i32 {\n    dataflow.state %true, \"loop_start\" or \"null\" {Enable = \"Loop_Start\"} : i1\n    %2:2 = dataflow.for %arg2 = %c0 to %c1024 step %c1 iter_args(%arg3 = %c0_i32, %arg4 = %c0_i32) -> (i32, i32) {\n      %3:2 = dataflow.execution : i32, i32 {\n        %4 = arith.index_cast %arg2 : index to i32\n        %5 = arith.remsi %arg2, %c8 : index\n        %6 = arith.cmpi slt, %5, %c0 : index\n        %7 = arith.addi %5, %c8 : index\n        %8 = arith.select %6, %7, %5 : index\n        %9 = arith.cmpi eq, %8, %c0 : index\n        %10 = arith.shrui %4, %c3_i32 : i32\n        %11 = arith.index_cast %10 : i32 to index\n        %12 = dataflow.addr %arg1[%11] {memShape = [128]} : memref<128xi32>[index] -> i32\n        %13 = dataflow.load %12 : i32 -> i32\n        %14 = dataflow.select %9, %13, %arg4 : i32\n        %15 = arith.andi %14, %c1_i32 : i32\n        %16 = arith.cmpi ne, %15, %c0_i32 : i32\n        %17 = dataflow.addr %arg0[%arg2] {memShape = [1024]} : memref<1024xi32>[index] -> i32\n        %18 = dataflow.load %17 : i32 -> i32\n        %19 = arith.muli %18, %c2_i32 : i32\n        %20 = dataflow.select %16, %19, %c0_i32 : i32\n        %21 = arith.addi %arg3, %20 : i32\n        %22 = arith.shrsi %14, %c1_i32 : i32\n        %23 = arith.addi %arg2, %c1 {Exe = \"Loop\"} : index\n        %24 = arith.cmpi eq, %23, %c1024 {Exe = \"Loop\"} : index\n        dataflow.state %24, \"loop_exit\" or \"loop_back\" {Exe = \"Loop\"} : i1\n        dataflow.yield {execution_block = 1 : i32} %21, %22 : i32, i32\n      }\n      dataflow.yield %3#0, %3#1 : i32, i32\n    } {Loop_Band = 0 : i32, Loop_Level = 0 : i32}\n    dataflow.yield %2#0 : i32\n  }\n  dataflow.yield %1 : i32\n}"
            ],
            "result_types": []
        },
        {
            "from": [],
            "instance": "func.func @dropout(%arg0: memref<1024xi32>, %arg1: memref<128xi32>) -> i32 attributes {llvm.linkage = #llvm.linkage<external>} {\n  %true = arith.constant true\n  %c1 = arith.constant 1 : index\n  %c1024 = arith.constant 1024 : index\n  %c0 = arith.constant 0 : index\n  %c0_i32 = arith.constant 0 : i32\n  %c3_i32 = arith.constant 3 : i32\n  %c1_i32 = arith.constant 1 : i32\n  %c2_i32 = arith.constant 2 : i32\n  %c8 = arith.constant 8 : index\n  %0 = dataflow.launch : i32 {\n    %1 = dataflow.task : i32 {\n      dataflow.state %true, \"loop_start\" or \"null\" {Enable = \"Loop_Start\"} : i1\n      %2:2 = dataflow.for %arg2 = %c0 to %c1024 step %c1 iter_args(%arg3 = %c0_i32, %arg4 = %c0_i32) -> (i32, i32) {\n        %3:2 = dataflow.execution : i32, i32 {\n          %4 = arith.index_cast %arg2 : index to i32\n          %5 = arith.remsi %arg2, %c8 : index\n          %6 = arith.cmpi slt, %5, %c0 : index\n          %7 = arith.addi %5, %c8 : index\n          %8 = arith.select %6, %7, %5 : index\n          %9 = arith.cmpi eq, %8, %c0 : index\n          %10 = arith.shrui %4, %c3_i32 : i32\n          %11 = arith.index_cast %10 : i32 to index\n          %12 = dataflow.addr %arg1[%11] {memShape = [128]} : memref<128xi32>[index] -> i32\n          %13 = dataflow.load %12 : i32 -> i32\n          %14 = dataflow.select %9, %13, %arg4 : i32\n          %15 = arith.andi %14, %c1_i32 : i32\n          %16 = arith.cmpi ne, %15, %c0_i32 : i32\n          %17 = dataflow.addr %arg0[%arg2] {memShape = [1024]} : memref<1024xi32>[index] -> i32\n          %18 = dataflow.load %17 : i32 -> i32\n          %19 = arith.muli %18, %c2_i32 : i32\n          %20 = dataflow.select %16, %19, %c0_i32 : i32\n          %21 = arith.addi %arg3, %20 : i32\n          %22 = arith.shrsi %14, %c1_i32 : i32\n          %23 = arith.addi %arg2, %c1 {Exe = \"Loop\"} : index\n          %24 = arith.cmpi eq, %23, %c1024 {Exe = \"Loop\"} : index\n          dataflow.state %24, \"loop_exit\" or \"loop_back\" {Exe = \"Loop\"} : i1\n          dataflow.yield {execution_block = 1 : i32} %21, %22 : i32, i32\n        }\n        dataflow.yield %3#0, %3#1 : i32, i32\n      } {Loop_Band = 0 : i32, Loop_Level = 0 : i32}\n      dataflow.yield %2#0 : i32\n    }\n    dataflow.yield %1 : i32\n  }\n  return %0 : i32\n}",
            "isBlock": true,
            "line": 2,
            "name": "func.func41",
            "operands": [],
            "regions": [
                [
                    {
                        "operations": [
                            "%true = arith.constant true",
                            "%c1 = arith.constant 1 : index",
                            "%c1024 = arith.constant 1024 : index",
                            "%c0 = arith.constant 0 : index",
                            "%c0_i32 = arith.constant 0 : i32",
                            "%c3_i32 = arith.constant 3 : i32",
                            "%c1_i32 = arith.constant 1 : i32",
                            "%c2_i32 = arith.constant 2 : i32",
                            "%c8 = arith.constant 8 : index",
                            "%0 = dataflow.launch : i32 {\n  %1 = dataflow.task : i32 {\n    dataflow.state %true, \"loop_start\" or \"null\" {Enable = \"Loop_Start\"} : i1\n    %2:2 = dataflow.for %arg2 = %c0 to %c1024 step %c1 iter_args(%arg3 = %c0_i32, %arg4 = %c0_i32) -> (i32, i32) {\n      %3:2 = dataflow.execution : i32, i32 {\n        %4 = arith.index_cast %arg2 : index to i32\n        %5 = arith.remsi %arg2, %c8 : index\n        %6 = arith.cmpi slt, %5, %c0 : index\n        %7 = arith.addi %5, %c8 : index\n        %8 = arith.select %6, %7, %5 : index\n        %9 = arith.cmpi eq, %8, %c0 : index\n        %10 = arith.shrui %4, %c3_i32 : i32\n        %11 = arith.index_cast %10 : i32 to index\n        %12 = dataflow.addr %arg1[%11] {memShape = [128]} : memref<128xi32>[index] -> i32\n        %13 = dataflow.load %12 : i32 -> i32\n        %14 = dataflow.select %9, %13, %arg4 : i32\n        %15 = arith.andi %14, %c1_i32 : i32\n        %16 = arith.cmpi ne, %15, %c0_i32 : i32\n        %17 = dataflow.addr %arg0[%arg2] {memShape = [1024]} : memref<1024xi32>[index] -> i32\n        %18 = dataflow.load %17 : i32 -> i32\n        %19 = arith.muli %18, %c2_i32 : i32\n        %20 = dataflow.select %16, %19, %c0_i32 : i32\n        %21 = arith.addi %arg3, %20 : i32\n        %22 = arith.shrsi %14, %c1_i32 : i32\n        %23 = arith.addi %arg2, %c1 {Exe = \"Loop\"} : index\n        %24 = arith.cmpi eq, %23, %c1024 {Exe = \"Loop\"} : index\n        dataflow.state %24, \"loop_exit\" or \"loop_back\" {Exe = \"Loop\"} : i1\n        dataflow.yield {execution_block = 1 : i32} %21, %22 : i32, i32\n      }\n      dataflow.yield %3#0, %3#1 : i32, i32\n    } {Loop_Band = 0 : i32, Loop_Level = 0 : i32}\n    dataflow.yield %2#0 : i32\n  }\n  dataflow.yield %1 : i32\n}",
                            "func.return %0 : i32"
                        ]
                    }
                ]
            ],
            "result_types": []
        }
    ],
    "LoopInfo": {
        "band0": {
            "loop_level": 0,
            "lower_bound": 0,
            "step": 1,
            "unroll_factor": {
                "max": 1024,
                "min": 1
            },
            "upper_bound": 1024,
            "vector_factor": {
                "max": 1024,
                "min": 1
            }
        }
    },
    "operations": [
        "arith.constant",
        "arith.constant",
        "arith.constant",
        "arith.constant",
        "arith.constant",
        "arith.constant",
        "arith.constant",
        "arith.constant",
        "arith.constant",
        "dataflow.state",
        "arith.index_cast",
        "arith.remsi",
        "arith.cmpi",
        "arith.addi",
        "arith.select",
        "arith.cmpi",
        "arith.shrui",
        "arith.index_cast",
        "dataflow.addr",
        "dataflow.load",
        "dataflow.select",
        "arith.andi",
        "arith.cmpi",
        "dataflow.addr",
        "dataflow.load",
        "arith.muli",
        "dataflow.select",
        "arith.addi",
        "arith.shrsi",
        "arith.addi",
        "arith.cmpi",
        "dataflow.state",
        "dataflow.yield",
        "dataflow.execution",
        "dataflow.yield",
        "dataflow.for",
        "dataflow.yield",
        "dataflow.task",
        "dataflow.yield",
        "dataflow.launch",
        "func.return",
        "func.func"
    ]
}