{
    "DFG": [
        {
            "from": [],
            "instance": "%c1 = arith.constant 1 : index",
            "isBlock": false,
            "line": 3,
            "name": "arith.constant0",
            "operands": [],
            "result_types": [
                "index"
            ],
            "to": [
                "dataflow.for59",
                "arith.addi53",
                "dataflow.for45",
                "arith.addi39",
                "dataflow.for31",
                "arith.addi25",
                "dataflow.for17",
                "arith.addi11"
            ]
        },
        {
            "from": [],
            "instance": "%c1024 = arith.constant 1024 : index",
            "isBlock": false,
            "line": 4,
            "name": "arith.constant1",
            "operands": [],
            "result_types": [
                "index"
            ],
            "to": [
                "dataflow.for59",
                "arith.cmpi54",
                "dataflow.for45",
                "arith.cmpi40",
                "dataflow.for31",
                "arith.cmpi26",
                "dataflow.for17",
                "arith.cmpi12"
            ]
        },
        {
            "from": [],
            "instance": "%c0 = arith.constant 0 : index",
            "isBlock": false,
            "line": 5,
            "name": "arith.constant2",
            "operands": [],
            "result_types": [
                "index"
            ],
            "to": [
                "dataflow.for59",
                "dataflow.for45",
                "dataflow.for31",
                "dataflow.for17"
            ]
        },
        {
            "from": [],
            "instance": "%c0_i32 = arith.constant 0 : i32",
            "isBlock": false,
            "line": 6,
            "name": "arith.constant3",
            "operands": [],
            "result_types": [
                "i32"
            ],
            "to": [
                "dataflow.for59",
                "arith.cmpi50",
                "dataflow.for45",
                "arith.cmpi36",
                "dataflow.for31",
                "arith.cmpi22",
                "dataflow.for17",
                "arith.cmpi8"
            ]
        },
        {
            "from": [],
            "instance": "%true = arith.constant true",
            "isBlock": false,
            "line": 7,
            "name": "arith.constant4",
            "operands": [],
            "result_types": [
                "i1"
            ],
            "to": [
                "dataflow.state5"
            ]
        },
        {
            "from": [
                "arith.constant4"
            ],
            "instance": "dataflow.state %true, \"loop_start\" or \"null\" {Enable = \"Loop_Start\"} : i1",
            "isBlock": false,
            "line": 9,
            "name": "dataflow.state5",
            "operands": [
                "%true = arith.constant true"
            ],
            "result_types": []
        },
        {
            "from": [
                "<block argument> of type 'memref<1024xi32>' at index: 0",
                "<block argument> of type 'index' at index: 0"
            ],
            "instance": "%10 = dataflow.addr %arg0[%arg4] {memShape = [1024]} : memref<1024xi32>[index] -> i32",
            "isBlock": false,
            "line": 13,
            "name": "dataflow.addr6",
            "operands": [
                "<block argument> of type 'memref<1024xi32>' at index: 0",
                "<block argument> of type 'index' at index: 0"
            ],
            "result_types": [
                "i32"
            ],
            "to": [
                "dataflow.load7"
            ]
        },
        {
            "from": [
                "dataflow.addr6"
            ],
            "instance": "%11 = dataflow.load %10 : i32 -> i32",
            "isBlock": false,
            "line": 14,
            "name": "dataflow.load7",
            "operands": [
                "%10 = dataflow.addr %arg0[%arg4] {memShape = [1024]} : memref<1024xi32>[index] -> i32"
            ],
            "result_types": [
                "i32"
            ],
            "to": [
                "arith.addi9",
                "arith.cmpi8"
            ]
        },
        {
            "from": [
                "dataflow.load7",
                "arith.constant3"
            ],
            "instance": "%12 = arith.cmpi ne, %11, %c0_i32 : i32",
            "isBlock": false,
            "line": 15,
            "name": "arith.cmpi8",
            "operands": [
                "%11 = dataflow.load %10 : i32 -> i32",
                "%c0_i32 = arith.constant 0 : i32"
            ],
            "result_types": [
                "i1"
            ],
            "to": [
                "dataflow.select10"
            ]
        },
        {
            "from": [
                "<block argument> of type 'i32' at index: 1",
                "dataflow.load7"
            ],
            "instance": "%13 = arith.addi %arg5, %11 : i32",
            "isBlock": false,
            "line": 16,
            "name": "arith.addi9",
            "operands": [
                "<block argument> of type 'i32' at index: 1",
                "%11 = dataflow.load %10 : i32 -> i32"
            ],
            "result_types": [
                "i32"
            ],
            "to": [
                "dataflow.select10"
            ]
        },
        {
            "from": [
                "arith.cmpi8",
                "arith.addi9",
                "<block argument> of type 'i32' at index: 1"
            ],
            "instance": "%14 = dataflow.select %12, %13, %arg5 : i32",
            "isBlock": false,
            "line": 17,
            "name": "dataflow.select10",
            "operands": [
                "%12 = arith.cmpi ne, %11, %c0_i32 : i32",
                "%13 = arith.addi %arg5, %11 : i32",
                "<block argument> of type 'i32' at index: 1"
            ],
            "result_types": [
                "i32"
            ],
            "to": [
                "dataflow.yield14"
            ]
        },
        {
            "from": [
                "<block argument> of type 'index' at index: 0",
                "arith.constant0"
            ],
            "instance": "%15 = arith.addi %arg4, %c1 {Exe = \"Loop\"} : index",
            "isBlock": false,
            "line": 18,
            "name": "arith.addi11",
            "operands": [
                "<block argument> of type 'index' at index: 0",
                "%c1 = arith.constant 1 : index"
            ],
            "result_types": [
                "index"
            ],
            "to": [
                "arith.cmpi12"
            ]
        },
        {
            "from": [
                "arith.addi11",
                "arith.constant1"
            ],
            "instance": "%16 = arith.cmpi eq, %15, %c1024 {Exe = \"Loop\"} : index",
            "isBlock": false,
            "line": 19,
            "name": "arith.cmpi12",
            "operands": [
                "%15 = arith.addi %arg4, %c1 {Exe = \"Loop\"} : index",
                "%c1024 = arith.constant 1024 : index"
            ],
            "result_types": [
                "i1"
            ],
            "to": [
                "dataflow.state13"
            ]
        },
        {
            "from": [
                "arith.cmpi12"
            ],
            "instance": "dataflow.state %16, \"loop_exit\" or \"loop_back\" {Exe = \"Loop\"} : i1",
            "isBlock": false,
            "line": 20,
            "name": "dataflow.state13",
            "operands": [
                "%16 = arith.cmpi eq, %15, %c1024 {Exe = \"Loop\"} : index"
            ],
            "result_types": []
        },
        {
            "from": [
                "dataflow.select10"
            ],
            "instance": "dataflow.yield {execution_block = 1 : i32} %14 : i32",
            "isBlock": false,
            "line": 21,
            "name": "dataflow.yield14",
            "operands": [
                "%14 = dataflow.select %12, %13, %arg5 : i32"
            ],
            "result_types": []
        },
        {
            "from": [],
            "instance": "%9 = dataflow.execution : i32 {\n  %10 = dataflow.addr %arg0[%arg4] {memShape = [1024]} : memref<1024xi32>[index] -> i32\n  %11 = dataflow.load %10 : i32 -> i32\n  %12 = arith.cmpi ne, %11, %c0_i32 : i32\n  %13 = arith.addi %arg5, %11 : i32\n  %14 = dataflow.select %12, %13, %arg5 : i32\n  %15 = arith.addi %arg4, %c1 {Exe = \"Loop\"} : index\n  %16 = arith.cmpi eq, %15, %c1024 {Exe = \"Loop\"} : index\n  dataflow.state %16, \"loop_exit\" or \"loop_back\" {Exe = \"Loop\"} : i1\n  dataflow.yield {execution_block = 1 : i32} %14 : i32\n}",
            "isBlock": true,
            "line": 12,
            "name": "dataflow.execution15",
            "operands": [],
            "regions": [
                [
                    {
                        "operations": [
                            "%10 = dataflow.addr %arg0[%arg4] {memShape = [1024]} : memref<1024xi32>[index] -> i32",
                            "%11 = dataflow.load %10 : i32 -> i32",
                            "%12 = arith.cmpi ne, %11, %c0_i32 : i32",
                            "%13 = arith.addi %arg5, %11 : i32",
                            "%14 = dataflow.select %12, %13, %arg5 : i32",
                            "%15 = arith.addi %arg4, %c1 {Exe = \"Loop\"} : index",
                            "%16 = arith.cmpi eq, %15, %c1024 {Exe = \"Loop\"} : index",
                            "dataflow.state %16, \"loop_exit\" or \"loop_back\" {Exe = \"Loop\"} : i1",
                            "dataflow.yield {execution_block = 1 : i32} %14 : i32"
                        ]
                    }
                ]
            ],
            "result_types": [
                "i32"
            ],
            "to": [
                "dataflow.yield16"
            ]
        },
        {
            "from": [
                "dataflow.execution15"
            ],
            "instance": "dataflow.yield %9 : i32",
            "isBlock": false,
            "line": 23,
            "name": "dataflow.yield16",
            "operands": [
                "%9 = dataflow.execution : i32 {\n  %10 = dataflow.addr %arg0[%arg4] {memShape = [1024]} : memref<1024xi32>[index] -> i32\n  %11 = dataflow.load %10 : i32 -> i32\n  %12 = arith.cmpi ne, %11, %c0_i32 : i32\n  %13 = arith.addi %arg5, %11 : i32\n  %14 = dataflow.select %12, %13, %arg5 : i32\n  %15 = arith.addi %arg4, %c1 {Exe = \"Loop\"} : index\n  %16 = arith.cmpi eq, %15, %c1024 {Exe = \"Loop\"} : index\n  dataflow.state %16, \"loop_exit\" or \"loop_back\" {Exe = \"Loop\"} : i1\n  dataflow.yield {execution_block = 1 : i32} %14 : i32\n}"
            ],
            "result_types": []
        },
        {
            "from": [
                "arith.constant2",
                "arith.constant1",
                "arith.constant0",
                "arith.constant3"
            ],
            "instance": "%8 = dataflow.for %arg4 = %c0 to %c1024 step %c1 iter_args(%arg5 = %c0_i32) -> (i32) {\n  %9 = dataflow.execution : i32 {\n    %10 = dataflow.addr %arg0[%arg4] {memShape = [1024]} : memref<1024xi32>[index] -> i32\n    %11 = dataflow.load %10 : i32 -> i32\n    %12 = arith.cmpi ne, %11, %c0_i32 : i32\n    %13 = arith.addi %arg5, %11 : i32\n    %14 = dataflow.select %12, %13, %arg5 : i32\n    %15 = arith.addi %arg4, %c1 {Exe = \"Loop\"} : index\n    %16 = arith.cmpi eq, %15, %c1024 {Exe = \"Loop\"} : index\n    dataflow.state %16, \"loop_exit\" or \"loop_back\" {Exe = \"Loop\"} : i1\n    dataflow.yield {execution_block = 1 : i32} %14 : i32\n  }\n  dataflow.yield %9 : i32\n} {Loop_Band = 3 : i32, Loop_Level = 0 : i32}",
            "isBlock": true,
            "line": 11,
            "name": "dataflow.for17",
            "operands": [
                "%c0 = arith.constant 0 : index",
                "%c1024 = arith.constant 1024 : index",
                "%c1 = arith.constant 1 : index",
                "%c0_i32 = arith.constant 0 : i32"
            ],
            "regions": [
                [
                    {
                        "operations": [
                            "%9 = dataflow.execution : i32 {\n  %10 = dataflow.addr %arg0[%arg4] {memShape = [1024]} : memref<1024xi32>[index] -> i32\n  %11 = dataflow.load %10 : i32 -> i32\n  %12 = arith.cmpi ne, %11, %c0_i32 : i32\n  %13 = arith.addi %arg5, %11 : i32\n  %14 = dataflow.select %12, %13, %arg5 : i32\n  %15 = arith.addi %arg4, %c1 {Exe = \"Loop\"} : index\n  %16 = arith.cmpi eq, %15, %c1024 {Exe = \"Loop\"} : index\n  dataflow.state %16, \"loop_exit\" or \"loop_back\" {Exe = \"Loop\"} : i1\n  dataflow.yield {execution_block = 1 : i32} %14 : i32\n}",
                            "dataflow.yield %9 : i32"
                        ]
                    }
                ]
            ],
            "result_types": [
                "i32"
            ],
            "to": [
                "dataflow.yield18"
            ]
        },
        {
            "from": [
                "dataflow.for17"
            ],
            "instance": "dataflow.yield %8 : i32",
            "isBlock": false,
            "line": 25,
            "name": "dataflow.yield18",
            "operands": [
                "%8 = dataflow.for %arg4 = %c0 to %c1024 step %c1 iter_args(%arg5 = %c0_i32) -> (i32) {\n  %9 = dataflow.execution : i32 {\n    %10 = dataflow.addr %arg0[%arg4] {memShape = [1024]} : memref<1024xi32>[index] -> i32\n    %11 = dataflow.load %10 : i32 -> i32\n    %12 = arith.cmpi ne, %11, %c0_i32 : i32\n    %13 = arith.addi %arg5, %11 : i32\n    %14 = dataflow.select %12, %13, %arg5 : i32\n    %15 = arith.addi %arg4, %c1 {Exe = \"Loop\"} : index\n    %16 = arith.cmpi eq, %15, %c1024 {Exe = \"Loop\"} : index\n    dataflow.state %16, \"loop_exit\" or \"loop_back\" {Exe = \"Loop\"} : i1\n    dataflow.yield {execution_block = 1 : i32} %14 : i32\n  }\n  dataflow.yield %9 : i32\n} {Loop_Band = 3 : i32, Loop_Level = 0 : i32}"
            ],
            "result_types": []
        },
        {
            "from": [],
            "instance": "%1 = dataflow.task : i32 {\n  %8 = dataflow.for %arg4 = %c0 to %c1024 step %c1 iter_args(%arg5 = %c0_i32) -> (i32) {\n    %9 = dataflow.execution : i32 {\n      %10 = dataflow.addr %arg0[%arg4] {memShape = [1024]} : memref<1024xi32>[index] -> i32\n      %11 = dataflow.load %10 : i32 -> i32\n      %12 = arith.cmpi ne, %11, %c0_i32 : i32\n      %13 = arith.addi %arg5, %11 : i32\n      %14 = dataflow.select %12, %13, %arg5 : i32\n      %15 = arith.addi %arg4, %c1 {Exe = \"Loop\"} : index\n      %16 = arith.cmpi eq, %15, %c1024 {Exe = \"Loop\"} : index\n      dataflow.state %16, \"loop_exit\" or \"loop_back\" {Exe = \"Loop\"} : i1\n      dataflow.yield {execution_block = 1 : i32} %14 : i32\n    }\n    dataflow.yield %9 : i32\n  } {Loop_Band = 3 : i32, Loop_Level = 0 : i32}\n  dataflow.yield %8 : i32\n}",
            "isBlock": true,
            "line": 10,
            "name": "dataflow.task19",
            "operands": [],
            "regions": [
                [
                    {
                        "operations": [
                            "%8 = dataflow.for %arg4 = %c0 to %c1024 step %c1 iter_args(%arg5 = %c0_i32) -> (i32) {\n  %9 = dataflow.execution : i32 {\n    %10 = dataflow.addr %arg0[%arg4] {memShape = [1024]} : memref<1024xi32>[index] -> i32\n    %11 = dataflow.load %10 : i32 -> i32\n    %12 = arith.cmpi ne, %11, %c0_i32 : i32\n    %13 = arith.addi %arg5, %11 : i32\n    %14 = dataflow.select %12, %13, %arg5 : i32\n    %15 = arith.addi %arg4, %c1 {Exe = \"Loop\"} : index\n    %16 = arith.cmpi eq, %15, %c1024 {Exe = \"Loop\"} : index\n    dataflow.state %16, \"loop_exit\" or \"loop_back\" {Exe = \"Loop\"} : i1\n    dataflow.yield {execution_block = 1 : i32} %14 : i32\n  }\n  dataflow.yield %9 : i32\n} {Loop_Band = 3 : i32, Loop_Level = 0 : i32}",
                            "dataflow.yield %8 : i32"
                        ]
                    }
                ]
            ],
            "result_types": [
                "i32"
            ],
            "to": [
                "arith.addi62"
            ]
        },
        {
            "from": [
                "<block argument> of type 'memref<1024xi32>' at index: 1",
                "<block argument> of type 'index' at index: 0"
            ],
            "instance": "%10 = dataflow.addr %arg1[%arg4] {memShape = [1024]} : memref<1024xi32>[index] -> i32",
            "isBlock": false,
            "line": 30,
            "name": "dataflow.addr20",
            "operands": [
                "<block argument> of type 'memref<1024xi32>' at index: 1",
                "<block argument> of type 'index' at index: 0"
            ],
            "result_types": [
                "i32"
            ],
            "to": [
                "dataflow.load21"
            ]
        },
        {
            "from": [
                "dataflow.addr20"
            ],
            "instance": "%11 = dataflow.load %10 : i32 -> i32",
            "isBlock": false,
            "line": 31,
            "name": "dataflow.load21",
            "operands": [
                "%10 = dataflow.addr %arg1[%arg4] {memShape = [1024]} : memref<1024xi32>[index] -> i32"
            ],
            "result_types": [
                "i32"
            ],
            "to": [
                "arith.addi23",
                "arith.cmpi22"
            ]
        },
        {
            "from": [
                "dataflow.load21",
                "arith.constant3"
            ],
            "instance": "%12 = arith.cmpi ne, %11, %c0_i32 : i32",
            "isBlock": false,
            "line": 32,
            "name": "arith.cmpi22",
            "operands": [
                "%11 = dataflow.load %10 : i32 -> i32",
                "%c0_i32 = arith.constant 0 : i32"
            ],
            "result_types": [
                "i1"
            ],
            "to": [
                "dataflow.select24"
            ]
        },
        {
            "from": [
                "<block argument> of type 'i32' at index: 1",
                "dataflow.load21"
            ],
            "instance": "%13 = arith.addi %arg5, %11 : i32",
            "isBlock": false,
            "line": 33,
            "name": "arith.addi23",
            "operands": [
                "<block argument> of type 'i32' at index: 1",
                "%11 = dataflow.load %10 : i32 -> i32"
            ],
            "result_types": [
                "i32"
            ],
            "to": [
                "dataflow.select24"
            ]
        },
        {
            "from": [
                "arith.cmpi22",
                "arith.addi23",
                "<block argument> of type 'i32' at index: 1"
            ],
            "instance": "%14 = dataflow.select %12, %13, %arg5 : i32",
            "isBlock": false,
            "line": 34,
            "name": "dataflow.select24",
            "operands": [
                "%12 = arith.cmpi ne, %11, %c0_i32 : i32",
                "%13 = arith.addi %arg5, %11 : i32",
                "<block argument> of type 'i32' at index: 1"
            ],
            "result_types": [
                "i32"
            ],
            "to": [
                "dataflow.yield28"
            ]
        },
        {
            "from": [
                "<block argument> of type 'index' at index: 0",
                "arith.constant0"
            ],
            "instance": "%15 = arith.addi %arg4, %c1 {Exe = \"Loop\"} : index",
            "isBlock": false,
            "line": 35,
            "name": "arith.addi25",
            "operands": [
                "<block argument> of type 'index' at index: 0",
                "%c1 = arith.constant 1 : index"
            ],
            "result_types": [
                "index"
            ],
            "to": [
                "arith.cmpi26"
            ]
        },
        {
            "from": [
                "arith.addi25",
                "arith.constant1"
            ],
            "instance": "%16 = arith.cmpi eq, %15, %c1024 {Exe = \"Loop\"} : index",
            "isBlock": false,
            "line": 36,
            "name": "arith.cmpi26",
            "operands": [
                "%15 = arith.addi %arg4, %c1 {Exe = \"Loop\"} : index",
                "%c1024 = arith.constant 1024 : index"
            ],
            "result_types": [
                "i1"
            ],
            "to": [
                "dataflow.state27"
            ]
        },
        {
            "from": [
                "arith.cmpi26"
            ],
            "instance": "dataflow.state %16, \"loop_exit\" or \"loop_back\" {Exe = \"Loop\"} : i1",
            "isBlock": false,
            "line": 37,
            "name": "dataflow.state27",
            "operands": [
                "%16 = arith.cmpi eq, %15, %c1024 {Exe = \"Loop\"} : index"
            ],
            "result_types": []
        },
        {
            "from": [
                "dataflow.select24"
            ],
            "instance": "dataflow.yield {execution_block = 1 : i32} %14 : i32",
            "isBlock": false,
            "line": 38,
            "name": "dataflow.yield28",
            "operands": [
                "%14 = dataflow.select %12, %13, %arg5 : i32"
            ],
            "result_types": []
        },
        {
            "from": [],
            "instance": "%9 = dataflow.execution : i32 {\n  %10 = dataflow.addr %arg1[%arg4] {memShape = [1024]} : memref<1024xi32>[index] -> i32\n  %11 = dataflow.load %10 : i32 -> i32\n  %12 = arith.cmpi ne, %11, %c0_i32 : i32\n  %13 = arith.addi %arg5, %11 : i32\n  %14 = dataflow.select %12, %13, %arg5 : i32\n  %15 = arith.addi %arg4, %c1 {Exe = \"Loop\"} : index\n  %16 = arith.cmpi eq, %15, %c1024 {Exe = \"Loop\"} : index\n  dataflow.state %16, \"loop_exit\" or \"loop_back\" {Exe = \"Loop\"} : i1\n  dataflow.yield {execution_block = 1 : i32} %14 : i32\n}",
            "isBlock": true,
            "line": 29,
            "name": "dataflow.execution29",
            "operands": [],
            "regions": [
                [
                    {
                        "operations": [
                            "%10 = dataflow.addr %arg1[%arg4] {memShape = [1024]} : memref<1024xi32>[index] -> i32",
                            "%11 = dataflow.load %10 : i32 -> i32",
                            "%12 = arith.cmpi ne, %11, %c0_i32 : i32",
                            "%13 = arith.addi %arg5, %11 : i32",
                            "%14 = dataflow.select %12, %13, %arg5 : i32",
                            "%15 = arith.addi %arg4, %c1 {Exe = \"Loop\"} : index",
                            "%16 = arith.cmpi eq, %15, %c1024 {Exe = \"Loop\"} : index",
                            "dataflow.state %16, \"loop_exit\" or \"loop_back\" {Exe = \"Loop\"} : i1",
                            "dataflow.yield {execution_block = 1 : i32} %14 : i32"
                        ]
                    }
                ]
            ],
            "result_types": [
                "i32"
            ],
            "to": [
                "dataflow.yield30"
            ]
        },
        {
            "from": [
                "dataflow.execution29"
            ],
            "instance": "dataflow.yield %9 : i32",
            "isBlock": false,
            "line": 40,
            "name": "dataflow.yield30",
            "operands": [
                "%9 = dataflow.execution : i32 {\n  %10 = dataflow.addr %arg1[%arg4] {memShape = [1024]} : memref<1024xi32>[index] -> i32\n  %11 = dataflow.load %10 : i32 -> i32\n  %12 = arith.cmpi ne, %11, %c0_i32 : i32\n  %13 = arith.addi %arg5, %11 : i32\n  %14 = dataflow.select %12, %13, %arg5 : i32\n  %15 = arith.addi %arg4, %c1 {Exe = \"Loop\"} : index\n  %16 = arith.cmpi eq, %15, %c1024 {Exe = \"Loop\"} : index\n  dataflow.state %16, \"loop_exit\" or \"loop_back\" {Exe = \"Loop\"} : i1\n  dataflow.yield {execution_block = 1 : i32} %14 : i32\n}"
            ],
            "result_types": []
        },
        {
            "from": [
                "arith.constant2",
                "arith.constant1",
                "arith.constant0",
                "arith.constant3"
            ],
            "instance": "%8 = dataflow.for %arg4 = %c0 to %c1024 step %c1 iter_args(%arg5 = %c0_i32) -> (i32) {\n  %9 = dataflow.execution : i32 {\n    %10 = dataflow.addr %arg1[%arg4] {memShape = [1024]} : memref<1024xi32>[index] -> i32\n    %11 = dataflow.load %10 : i32 -> i32\n    %12 = arith.cmpi ne, %11, %c0_i32 : i32\n    %13 = arith.addi %arg5, %11 : i32\n    %14 = dataflow.select %12, %13, %arg5 : i32\n    %15 = arith.addi %arg4, %c1 {Exe = \"Loop\"} : index\n    %16 = arith.cmpi eq, %15, %c1024 {Exe = \"Loop\"} : index\n    dataflow.state %16, \"loop_exit\" or \"loop_back\" {Exe = \"Loop\"} : i1\n    dataflow.yield {execution_block = 1 : i32} %14 : i32\n  }\n  dataflow.yield %9 : i32\n} {Loop_Band = 2 : i32, Loop_Level = 0 : i32}",
            "isBlock": true,
            "line": 28,
            "name": "dataflow.for31",
            "operands": [
                "%c0 = arith.constant 0 : index",
                "%c1024 = arith.constant 1024 : index",
                "%c1 = arith.constant 1 : index",
                "%c0_i32 = arith.constant 0 : i32"
            ],
            "regions": [
                [
                    {
                        "operations": [
                            "%9 = dataflow.execution : i32 {\n  %10 = dataflow.addr %arg1[%arg4] {memShape = [1024]} : memref<1024xi32>[index] -> i32\n  %11 = dataflow.load %10 : i32 -> i32\n  %12 = arith.cmpi ne, %11, %c0_i32 : i32\n  %13 = arith.addi %arg5, %11 : i32\n  %14 = dataflow.select %12, %13, %arg5 : i32\n  %15 = arith.addi %arg4, %c1 {Exe = \"Loop\"} : index\n  %16 = arith.cmpi eq, %15, %c1024 {Exe = \"Loop\"} : index\n  dataflow.state %16, \"loop_exit\" or \"loop_back\" {Exe = \"Loop\"} : i1\n  dataflow.yield {execution_block = 1 : i32} %14 : i32\n}",
                            "dataflow.yield %9 : i32"
                        ]
                    }
                ]
            ],
            "result_types": [
                "i32"
            ],
            "to": [
                "dataflow.yield32"
            ]
        },
        {
            "from": [
                "dataflow.for31"
            ],
            "instance": "dataflow.yield %8 : i32",
            "isBlock": false,
            "line": 42,
            "name": "dataflow.yield32",
            "operands": [
                "%8 = dataflow.for %arg4 = %c0 to %c1024 step %c1 iter_args(%arg5 = %c0_i32) -> (i32) {\n  %9 = dataflow.execution : i32 {\n    %10 = dataflow.addr %arg1[%arg4] {memShape = [1024]} : memref<1024xi32>[index] -> i32\n    %11 = dataflow.load %10 : i32 -> i32\n    %12 = arith.cmpi ne, %11, %c0_i32 : i32\n    %13 = arith.addi %arg5, %11 : i32\n    %14 = dataflow.select %12, %13, %arg5 : i32\n    %15 = arith.addi %arg4, %c1 {Exe = \"Loop\"} : index\n    %16 = arith.cmpi eq, %15, %c1024 {Exe = \"Loop\"} : index\n    dataflow.state %16, \"loop_exit\" or \"loop_back\" {Exe = \"Loop\"} : i1\n    dataflow.yield {execution_block = 1 : i32} %14 : i32\n  }\n  dataflow.yield %9 : i32\n} {Loop_Band = 2 : i32, Loop_Level = 0 : i32}"
            ],
            "result_types": []
        },
        {
            "from": [],
            "instance": "%2 = dataflow.task : i32 {\n  %8 = dataflow.for %arg4 = %c0 to %c1024 step %c1 iter_args(%arg5 = %c0_i32) -> (i32) {\n    %9 = dataflow.execution : i32 {\n      %10 = dataflow.addr %arg1[%arg4] {memShape = [1024]} : memref<1024xi32>[index] -> i32\n      %11 = dataflow.load %10 : i32 -> i32\n      %12 = arith.cmpi ne, %11, %c0_i32 : i32\n      %13 = arith.addi %arg5, %11 : i32\n      %14 = dataflow.select %12, %13, %arg5 : i32\n      %15 = arith.addi %arg4, %c1 {Exe = \"Loop\"} : index\n      %16 = arith.cmpi eq, %15, %c1024 {Exe = \"Loop\"} : index\n      dataflow.state %16, \"loop_exit\" or \"loop_back\" {Exe = \"Loop\"} : i1\n      dataflow.yield {execution_block = 1 : i32} %14 : i32\n    }\n    dataflow.yield %9 : i32\n  } {Loop_Band = 2 : i32, Loop_Level = 0 : i32}\n  dataflow.yield %8 : i32\n}",
            "isBlock": true,
            "line": 27,
            "name": "dataflow.task33",
            "operands": [],
            "regions": [
                [
                    {
                        "operations": [
                            "%8 = dataflow.for %arg4 = %c0 to %c1024 step %c1 iter_args(%arg5 = %c0_i32) -> (i32) {\n  %9 = dataflow.execution : i32 {\n    %10 = dataflow.addr %arg1[%arg4] {memShape = [1024]} : memref<1024xi32>[index] -> i32\n    %11 = dataflow.load %10 : i32 -> i32\n    %12 = arith.cmpi ne, %11, %c0_i32 : i32\n    %13 = arith.addi %arg5, %11 : i32\n    %14 = dataflow.select %12, %13, %arg5 : i32\n    %15 = arith.addi %arg4, %c1 {Exe = \"Loop\"} : index\n    %16 = arith.cmpi eq, %15, %c1024 {Exe = \"Loop\"} : index\n    dataflow.state %16, \"loop_exit\" or \"loop_back\" {Exe = \"Loop\"} : i1\n    dataflow.yield {execution_block = 1 : i32} %14 : i32\n  }\n  dataflow.yield %9 : i32\n} {Loop_Band = 2 : i32, Loop_Level = 0 : i32}",
                            "dataflow.yield %8 : i32"
                        ]
                    }
                ]
            ],
            "result_types": [
                "i32"
            ],
            "to": [
                "arith.addi62"
            ]
        },
        {
            "from": [
                "<block argument> of type 'memref<1024xi32>' at index: 2",
                "<block argument> of type 'index' at index: 0"
            ],
            "instance": "%10 = dataflow.addr %arg2[%arg4] {memShape = [1024]} : memref<1024xi32>[index] -> i32",
            "isBlock": false,
            "line": 47,
            "name": "dataflow.addr34",
            "operands": [
                "<block argument> of type 'memref<1024xi32>' at index: 2",
                "<block argument> of type 'index' at index: 0"
            ],
            "result_types": [
                "i32"
            ],
            "to": [
                "dataflow.load35"
            ]
        },
        {
            "from": [
                "dataflow.addr34"
            ],
            "instance": "%11 = dataflow.load %10 : i32 -> i32",
            "isBlock": false,
            "line": 48,
            "name": "dataflow.load35",
            "operands": [
                "%10 = dataflow.addr %arg2[%arg4] {memShape = [1024]} : memref<1024xi32>[index] -> i32"
            ],
            "result_types": [
                "i32"
            ],
            "to": [
                "arith.addi37",
                "arith.cmpi36"
            ]
        },
        {
            "from": [
                "dataflow.load35",
                "arith.constant3"
            ],
            "instance": "%12 = arith.cmpi ne, %11, %c0_i32 : i32",
            "isBlock": false,
            "line": 49,
            "name": "arith.cmpi36",
            "operands": [
                "%11 = dataflow.load %10 : i32 -> i32",
                "%c0_i32 = arith.constant 0 : i32"
            ],
            "result_types": [
                "i1"
            ],
            "to": [
                "dataflow.select38"
            ]
        },
        {
            "from": [
                "<block argument> of type 'i32' at index: 1",
                "dataflow.load35"
            ],
            "instance": "%13 = arith.addi %arg5, %11 : i32",
            "isBlock": false,
            "line": 50,
            "name": "arith.addi37",
            "operands": [
                "<block argument> of type 'i32' at index: 1",
                "%11 = dataflow.load %10 : i32 -> i32"
            ],
            "result_types": [
                "i32"
            ],
            "to": [
                "dataflow.select38"
            ]
        },
        {
            "from": [
                "arith.cmpi36",
                "arith.addi37",
                "<block argument> of type 'i32' at index: 1"
            ],
            "instance": "%14 = dataflow.select %12, %13, %arg5 : i32",
            "isBlock": false,
            "line": 51,
            "name": "dataflow.select38",
            "operands": [
                "%12 = arith.cmpi ne, %11, %c0_i32 : i32",
                "%13 = arith.addi %arg5, %11 : i32",
                "<block argument> of type 'i32' at index: 1"
            ],
            "result_types": [
                "i32"
            ],
            "to": [
                "dataflow.yield42"
            ]
        },
        {
            "from": [
                "<block argument> of type 'index' at index: 0",
                "arith.constant0"
            ],
            "instance": "%15 = arith.addi %arg4, %c1 {Exe = \"Loop\"} : index",
            "isBlock": false,
            "line": 52,
            "name": "arith.addi39",
            "operands": [
                "<block argument> of type 'index' at index: 0",
                "%c1 = arith.constant 1 : index"
            ],
            "result_types": [
                "index"
            ],
            "to": [
                "arith.cmpi40"
            ]
        },
        {
            "from": [
                "arith.addi39",
                "arith.constant1"
            ],
            "instance": "%16 = arith.cmpi eq, %15, %c1024 {Exe = \"Loop\"} : index",
            "isBlock": false,
            "line": 53,
            "name": "arith.cmpi40",
            "operands": [
                "%15 = arith.addi %arg4, %c1 {Exe = \"Loop\"} : index",
                "%c1024 = arith.constant 1024 : index"
            ],
            "result_types": [
                "i1"
            ],
            "to": [
                "dataflow.state41"
            ]
        },
        {
            "from": [
                "arith.cmpi40"
            ],
            "instance": "dataflow.state %16, \"loop_exit\" or \"loop_back\" {Exe = \"Loop\"} : i1",
            "isBlock": false,
            "line": 54,
            "name": "dataflow.state41",
            "operands": [
                "%16 = arith.cmpi eq, %15, %c1024 {Exe = \"Loop\"} : index"
            ],
            "result_types": []
        },
        {
            "from": [
                "dataflow.select38"
            ],
            "instance": "dataflow.yield {execution_block = 1 : i32} %14 : i32",
            "isBlock": false,
            "line": 55,
            "name": "dataflow.yield42",
            "operands": [
                "%14 = dataflow.select %12, %13, %arg5 : i32"
            ],
            "result_types": []
        },
        {
            "from": [],
            "instance": "%9 = dataflow.execution : i32 {\n  %10 = dataflow.addr %arg2[%arg4] {memShape = [1024]} : memref<1024xi32>[index] -> i32\n  %11 = dataflow.load %10 : i32 -> i32\n  %12 = arith.cmpi ne, %11, %c0_i32 : i32\n  %13 = arith.addi %arg5, %11 : i32\n  %14 = dataflow.select %12, %13, %arg5 : i32\n  %15 = arith.addi %arg4, %c1 {Exe = \"Loop\"} : index\n  %16 = arith.cmpi eq, %15, %c1024 {Exe = \"Loop\"} : index\n  dataflow.state %16, \"loop_exit\" or \"loop_back\" {Exe = \"Loop\"} : i1\n  dataflow.yield {execution_block = 1 : i32} %14 : i32\n}",
            "isBlock": true,
            "line": 46,
            "name": "dataflow.execution43",
            "operands": [],
            "regions": [
                [
                    {
                        "operations": [
                            "%10 = dataflow.addr %arg2[%arg4] {memShape = [1024]} : memref<1024xi32>[index] -> i32",
                            "%11 = dataflow.load %10 : i32 -> i32",
                            "%12 = arith.cmpi ne, %11, %c0_i32 : i32",
                            "%13 = arith.addi %arg5, %11 : i32",
                            "%14 = dataflow.select %12, %13, %arg5 : i32",
                            "%15 = arith.addi %arg4, %c1 {Exe = \"Loop\"} : index",
                            "%16 = arith.cmpi eq, %15, %c1024 {Exe = \"Loop\"} : index",
                            "dataflow.state %16, \"loop_exit\" or \"loop_back\" {Exe = \"Loop\"} : i1",
                            "dataflow.yield {execution_block = 1 : i32} %14 : i32"
                        ]
                    }
                ]
            ],
            "result_types": [
                "i32"
            ],
            "to": [
                "dataflow.yield44"
            ]
        },
        {
            "from": [
                "dataflow.execution43"
            ],
            "instance": "dataflow.yield %9 : i32",
            "isBlock": false,
            "line": 57,
            "name": "dataflow.yield44",
            "operands": [
                "%9 = dataflow.execution : i32 {\n  %10 = dataflow.addr %arg2[%arg4] {memShape = [1024]} : memref<1024xi32>[index] -> i32\n  %11 = dataflow.load %10 : i32 -> i32\n  %12 = arith.cmpi ne, %11, %c0_i32 : i32\n  %13 = arith.addi %arg5, %11 : i32\n  %14 = dataflow.select %12, %13, %arg5 : i32\n  %15 = arith.addi %arg4, %c1 {Exe = \"Loop\"} : index\n  %16 = arith.cmpi eq, %15, %c1024 {Exe = \"Loop\"} : index\n  dataflow.state %16, \"loop_exit\" or \"loop_back\" {Exe = \"Loop\"} : i1\n  dataflow.yield {execution_block = 1 : i32} %14 : i32\n}"
            ],
            "result_types": []
        },
        {
            "from": [
                "arith.constant2",
                "arith.constant1",
                "arith.constant0",
                "arith.constant3"
            ],
            "instance": "%8 = dataflow.for %arg4 = %c0 to %c1024 step %c1 iter_args(%arg5 = %c0_i32) -> (i32) {\n  %9 = dataflow.execution : i32 {\n    %10 = dataflow.addr %arg2[%arg4] {memShape = [1024]} : memref<1024xi32>[index] -> i32\n    %11 = dataflow.load %10 : i32 -> i32\n    %12 = arith.cmpi ne, %11, %c0_i32 : i32\n    %13 = arith.addi %arg5, %11 : i32\n    %14 = dataflow.select %12, %13, %arg5 : i32\n    %15 = arith.addi %arg4, %c1 {Exe = \"Loop\"} : index\n    %16 = arith.cmpi eq, %15, %c1024 {Exe = \"Loop\"} : index\n    dataflow.state %16, \"loop_exit\" or \"loop_back\" {Exe = \"Loop\"} : i1\n    dataflow.yield {execution_block = 1 : i32} %14 : i32\n  }\n  dataflow.yield %9 : i32\n} {Loop_Band = 1 : i32, Loop_Level = 0 : i32}",
            "isBlock": true,
            "line": 45,
            "name": "dataflow.for45",
            "operands": [
                "%c0 = arith.constant 0 : index",
                "%c1024 = arith.constant 1024 : index",
                "%c1 = arith.constant 1 : index",
                "%c0_i32 = arith.constant 0 : i32"
            ],
            "regions": [
                [
                    {
                        "operations": [
                            "%9 = dataflow.execution : i32 {\n  %10 = dataflow.addr %arg2[%arg4] {memShape = [1024]} : memref<1024xi32>[index] -> i32\n  %11 = dataflow.load %10 : i32 -> i32\n  %12 = arith.cmpi ne, %11, %c0_i32 : i32\n  %13 = arith.addi %arg5, %11 : i32\n  %14 = dataflow.select %12, %13, %arg5 : i32\n  %15 = arith.addi %arg4, %c1 {Exe = \"Loop\"} : index\n  %16 = arith.cmpi eq, %15, %c1024 {Exe = \"Loop\"} : index\n  dataflow.state %16, \"loop_exit\" or \"loop_back\" {Exe = \"Loop\"} : i1\n  dataflow.yield {execution_block = 1 : i32} %14 : i32\n}",
                            "dataflow.yield %9 : i32"
                        ]
                    }
                ]
            ],
            "result_types": [
                "i32"
            ],
            "to": [
                "dataflow.yield46"
            ]
        },
        {
            "from": [
                "dataflow.for45"
            ],
            "instance": "dataflow.yield %8 : i32",
            "isBlock": false,
            "line": 59,
            "name": "dataflow.yield46",
            "operands": [
                "%8 = dataflow.for %arg4 = %c0 to %c1024 step %c1 iter_args(%arg5 = %c0_i32) -> (i32) {\n  %9 = dataflow.execution : i32 {\n    %10 = dataflow.addr %arg2[%arg4] {memShape = [1024]} : memref<1024xi32>[index] -> i32\n    %11 = dataflow.load %10 : i32 -> i32\n    %12 = arith.cmpi ne, %11, %c0_i32 : i32\n    %13 = arith.addi %arg5, %11 : i32\n    %14 = dataflow.select %12, %13, %arg5 : i32\n    %15 = arith.addi %arg4, %c1 {Exe = \"Loop\"} : index\n    %16 = arith.cmpi eq, %15, %c1024 {Exe = \"Loop\"} : index\n    dataflow.state %16, \"loop_exit\" or \"loop_back\" {Exe = \"Loop\"} : i1\n    dataflow.yield {execution_block = 1 : i32} %14 : i32\n  }\n  dataflow.yield %9 : i32\n} {Loop_Band = 1 : i32, Loop_Level = 0 : i32}"
            ],
            "result_types": []
        },
        {
            "from": [],
            "instance": "%3 = dataflow.task : i32 {\n  %8 = dataflow.for %arg4 = %c0 to %c1024 step %c1 iter_args(%arg5 = %c0_i32) -> (i32) {\n    %9 = dataflow.execution : i32 {\n      %10 = dataflow.addr %arg2[%arg4] {memShape = [1024]} : memref<1024xi32>[index] -> i32\n      %11 = dataflow.load %10 : i32 -> i32\n      %12 = arith.cmpi ne, %11, %c0_i32 : i32\n      %13 = arith.addi %arg5, %11 : i32\n      %14 = dataflow.select %12, %13, %arg5 : i32\n      %15 = arith.addi %arg4, %c1 {Exe = \"Loop\"} : index\n      %16 = arith.cmpi eq, %15, %c1024 {Exe = \"Loop\"} : index\n      dataflow.state %16, \"loop_exit\" or \"loop_back\" {Exe = \"Loop\"} : i1\n      dataflow.yield {execution_block = 1 : i32} %14 : i32\n    }\n    dataflow.yield %9 : i32\n  } {Loop_Band = 1 : i32, Loop_Level = 0 : i32}\n  dataflow.yield %8 : i32\n}",
            "isBlock": true,
            "line": 44,
            "name": "dataflow.task47",
            "operands": [],
            "regions": [
                [
                    {
                        "operations": [
                            "%8 = dataflow.for %arg4 = %c0 to %c1024 step %c1 iter_args(%arg5 = %c0_i32) -> (i32) {\n  %9 = dataflow.execution : i32 {\n    %10 = dataflow.addr %arg2[%arg4] {memShape = [1024]} : memref<1024xi32>[index] -> i32\n    %11 = dataflow.load %10 : i32 -> i32\n    %12 = arith.cmpi ne, %11, %c0_i32 : i32\n    %13 = arith.addi %arg5, %11 : i32\n    %14 = dataflow.select %12, %13, %arg5 : i32\n    %15 = arith.addi %arg4, %c1 {Exe = \"Loop\"} : index\n    %16 = arith.cmpi eq, %15, %c1024 {Exe = \"Loop\"} : index\n    dataflow.state %16, \"loop_exit\" or \"loop_back\" {Exe = \"Loop\"} : i1\n    dataflow.yield {execution_block = 1 : i32} %14 : i32\n  }\n  dataflow.yield %9 : i32\n} {Loop_Band = 1 : i32, Loop_Level = 0 : i32}",
                            "dataflow.yield %8 : i32"
                        ]
                    }
                ]
            ],
            "result_types": [
                "i32"
            ],
            "to": [
                "arith.addi63"
            ]
        },
        {
            "from": [
                "<block argument> of type 'memref<1024xi32>' at index: 3",
                "<block argument> of type 'index' at index: 0"
            ],
            "instance": "%10 = dataflow.addr %arg3[%arg4] {memShape = [1024]} : memref<1024xi32>[index] -> i32",
            "isBlock": false,
            "line": 64,
            "name": "dataflow.addr48",
            "operands": [
                "<block argument> of type 'memref<1024xi32>' at index: 3",
                "<block argument> of type 'index' at index: 0"
            ],
            "result_types": [
                "i32"
            ],
            "to": [
                "dataflow.load49"
            ]
        },
        {
            "from": [
                "dataflow.addr48"
            ],
            "instance": "%11 = dataflow.load %10 : i32 -> i32",
            "isBlock": false,
            "line": 65,
            "name": "dataflow.load49",
            "operands": [
                "%10 = dataflow.addr %arg3[%arg4] {memShape = [1024]} : memref<1024xi32>[index] -> i32"
            ],
            "result_types": [
                "i32"
            ],
            "to": [
                "arith.addi51",
                "arith.cmpi50"
            ]
        },
        {
            "from": [
                "dataflow.load49",
                "arith.constant3"
            ],
            "instance": "%12 = arith.cmpi ne, %11, %c0_i32 : i32",
            "isBlock": false,
            "line": 66,
            "name": "arith.cmpi50",
            "operands": [
                "%11 = dataflow.load %10 : i32 -> i32",
                "%c0_i32 = arith.constant 0 : i32"
            ],
            "result_types": [
                "i1"
            ],
            "to": [
                "dataflow.select52"
            ]
        },
        {
            "from": [
                "<block argument> of type 'i32' at index: 1",
                "dataflow.load49"
            ],
            "instance": "%13 = arith.addi %arg5, %11 : i32",
            "isBlock": false,
            "line": 67,
            "name": "arith.addi51",
            "operands": [
                "<block argument> of type 'i32' at index: 1",
                "%11 = dataflow.load %10 : i32 -> i32"
            ],
            "result_types": [
                "i32"
            ],
            "to": [
                "dataflow.select52"
            ]
        },
        {
            "from": [
                "arith.cmpi50",
                "arith.addi51",
                "<block argument> of type 'i32' at index: 1"
            ],
            "instance": "%14 = dataflow.select %12, %13, %arg5 : i32",
            "isBlock": false,
            "line": 68,
            "name": "dataflow.select52",
            "operands": [
                "%12 = arith.cmpi ne, %11, %c0_i32 : i32",
                "%13 = arith.addi %arg5, %11 : i32",
                "<block argument> of type 'i32' at index: 1"
            ],
            "result_types": [
                "i32"
            ],
            "to": [
                "dataflow.yield56"
            ]
        },
        {
            "from": [
                "<block argument> of type 'index' at index: 0",
                "arith.constant0"
            ],
            "instance": "%15 = arith.addi %arg4, %c1 {Exe = \"Loop\"} : index",
            "isBlock": false,
            "line": 69,
            "name": "arith.addi53",
            "operands": [
                "<block argument> of type 'index' at index: 0",
                "%c1 = arith.constant 1 : index"
            ],
            "result_types": [
                "index"
            ],
            "to": [
                "arith.cmpi54"
            ]
        },
        {
            "from": [
                "arith.addi53",
                "arith.constant1"
            ],
            "instance": "%16 = arith.cmpi eq, %15, %c1024 {Exe = \"Loop\"} : index",
            "isBlock": false,
            "line": 70,
            "name": "arith.cmpi54",
            "operands": [
                "%15 = arith.addi %arg4, %c1 {Exe = \"Loop\"} : index",
                "%c1024 = arith.constant 1024 : index"
            ],
            "result_types": [
                "i1"
            ],
            "to": [
                "dataflow.state55"
            ]
        },
        {
            "from": [
                "arith.cmpi54"
            ],
            "instance": "dataflow.state %16, \"loop_exit\" or \"loop_back\" {Exe = \"Loop\"} : i1",
            "isBlock": false,
            "line": 71,
            "name": "dataflow.state55",
            "operands": [
                "%16 = arith.cmpi eq, %15, %c1024 {Exe = \"Loop\"} : index"
            ],
            "result_types": []
        },
        {
            "from": [
                "dataflow.select52"
            ],
            "instance": "dataflow.yield {execution_block = 1 : i32} %14 : i32",
            "isBlock": false,
            "line": 72,
            "name": "dataflow.yield56",
            "operands": [
                "%14 = dataflow.select %12, %13, %arg5 : i32"
            ],
            "result_types": []
        },
        {
            "from": [],
            "instance": "%9 = dataflow.execution : i32 {\n  %10 = dataflow.addr %arg3[%arg4] {memShape = [1024]} : memref<1024xi32>[index] -> i32\n  %11 = dataflow.load %10 : i32 -> i32\n  %12 = arith.cmpi ne, %11, %c0_i32 : i32\n  %13 = arith.addi %arg5, %11 : i32\n  %14 = dataflow.select %12, %13, %arg5 : i32\n  %15 = arith.addi %arg4, %c1 {Exe = \"Loop\"} : index\n  %16 = arith.cmpi eq, %15, %c1024 {Exe = \"Loop\"} : index\n  dataflow.state %16, \"loop_exit\" or \"loop_back\" {Exe = \"Loop\"} : i1\n  dataflow.yield {execution_block = 1 : i32} %14 : i32\n}",
            "isBlock": true,
            "line": 63,
            "name": "dataflow.execution57",
            "operands": [],
            "regions": [
                [
                    {
                        "operations": [
                            "%10 = dataflow.addr %arg3[%arg4] {memShape = [1024]} : memref<1024xi32>[index] -> i32",
                            "%11 = dataflow.load %10 : i32 -> i32",
                            "%12 = arith.cmpi ne, %11, %c0_i32 : i32",
                            "%13 = arith.addi %arg5, %11 : i32",
                            "%14 = dataflow.select %12, %13, %arg5 : i32",
                            "%15 = arith.addi %arg4, %c1 {Exe = \"Loop\"} : index",
                            "%16 = arith.cmpi eq, %15, %c1024 {Exe = \"Loop\"} : index",
                            "dataflow.state %16, \"loop_exit\" or \"loop_back\" {Exe = \"Loop\"} : i1",
                            "dataflow.yield {execution_block = 1 : i32} %14 : i32"
                        ]
                    }
                ]
            ],
            "result_types": [
                "i32"
            ],
            "to": [
                "dataflow.yield58"
            ]
        },
        {
            "from": [
                "dataflow.execution57"
            ],
            "instance": "dataflow.yield %9 : i32",
            "isBlock": false,
            "line": 74,
            "name": "dataflow.yield58",
            "operands": [
                "%9 = dataflow.execution : i32 {\n  %10 = dataflow.addr %arg3[%arg4] {memShape = [1024]} : memref<1024xi32>[index] -> i32\n  %11 = dataflow.load %10 : i32 -> i32\n  %12 = arith.cmpi ne, %11, %c0_i32 : i32\n  %13 = arith.addi %arg5, %11 : i32\n  %14 = dataflow.select %12, %13, %arg5 : i32\n  %15 = arith.addi %arg4, %c1 {Exe = \"Loop\"} : index\n  %16 = arith.cmpi eq, %15, %c1024 {Exe = \"Loop\"} : index\n  dataflow.state %16, \"loop_exit\" or \"loop_back\" {Exe = \"Loop\"} : i1\n  dataflow.yield {execution_block = 1 : i32} %14 : i32\n}"
            ],
            "result_types": []
        },
        {
            "from": [
                "arith.constant2",
                "arith.constant1",
                "arith.constant0",
                "arith.constant3"
            ],
            "instance": "%8 = dataflow.for %arg4 = %c0 to %c1024 step %c1 iter_args(%arg5 = %c0_i32) -> (i32) {\n  %9 = dataflow.execution : i32 {\n    %10 = dataflow.addr %arg3[%arg4] {memShape = [1024]} : memref<1024xi32>[index] -> i32\n    %11 = dataflow.load %10 : i32 -> i32\n    %12 = arith.cmpi ne, %11, %c0_i32 : i32\n    %13 = arith.addi %arg5, %11 : i32\n    %14 = dataflow.select %12, %13, %arg5 : i32\n    %15 = arith.addi %arg4, %c1 {Exe = \"Loop\"} : index\n    %16 = arith.cmpi eq, %15, %c1024 {Exe = \"Loop\"} : index\n    dataflow.state %16, \"loop_exit\" or \"loop_back\" {Exe = \"Loop\"} : i1\n    dataflow.yield {execution_block = 1 : i32} %14 : i32\n  }\n  dataflow.yield %9 : i32\n} {Loop_Band = 0 : i32, Loop_Level = 0 : i32}",
            "isBlock": true,
            "line": 62,
            "name": "dataflow.for59",
            "operands": [
                "%c0 = arith.constant 0 : index",
                "%c1024 = arith.constant 1024 : index",
                "%c1 = arith.constant 1 : index",
                "%c0_i32 = arith.constant 0 : i32"
            ],
            "regions": [
                [
                    {
                        "operations": [
                            "%9 = dataflow.execution : i32 {\n  %10 = dataflow.addr %arg3[%arg4] {memShape = [1024]} : memref<1024xi32>[index] -> i32\n  %11 = dataflow.load %10 : i32 -> i32\n  %12 = arith.cmpi ne, %11, %c0_i32 : i32\n  %13 = arith.addi %arg5, %11 : i32\n  %14 = dataflow.select %12, %13, %arg5 : i32\n  %15 = arith.addi %arg4, %c1 {Exe = \"Loop\"} : index\n  %16 = arith.cmpi eq, %15, %c1024 {Exe = \"Loop\"} : index\n  dataflow.state %16, \"loop_exit\" or \"loop_back\" {Exe = \"Loop\"} : i1\n  dataflow.yield {execution_block = 1 : i32} %14 : i32\n}",
                            "dataflow.yield %9 : i32"
                        ]
                    }
                ]
            ],
            "result_types": [
                "i32"
            ],
            "to": [
                "dataflow.yield60"
            ]
        },
        {
            "from": [
                "dataflow.for59"
            ],
            "instance": "dataflow.yield %8 : i32",
            "isBlock": false,
            "line": 76,
            "name": "dataflow.yield60",
            "operands": [
                "%8 = dataflow.for %arg4 = %c0 to %c1024 step %c1 iter_args(%arg5 = %c0_i32) -> (i32) {\n  %9 = dataflow.execution : i32 {\n    %10 = dataflow.addr %arg3[%arg4] {memShape = [1024]} : memref<1024xi32>[index] -> i32\n    %11 = dataflow.load %10 : i32 -> i32\n    %12 = arith.cmpi ne, %11, %c0_i32 : i32\n    %13 = arith.addi %arg5, %11 : i32\n    %14 = dataflow.select %12, %13, %arg5 : i32\n    %15 = arith.addi %arg4, %c1 {Exe = \"Loop\"} : index\n    %16 = arith.cmpi eq, %15, %c1024 {Exe = \"Loop\"} : index\n    dataflow.state %16, \"loop_exit\" or \"loop_back\" {Exe = \"Loop\"} : i1\n    dataflow.yield {execution_block = 1 : i32} %14 : i32\n  }\n  dataflow.yield %9 : i32\n} {Loop_Band = 0 : i32, Loop_Level = 0 : i32}"
            ],
            "result_types": []
        },
        {
            "from": [],
            "instance": "%4 = dataflow.task : i32 {\n  %8 = dataflow.for %arg4 = %c0 to %c1024 step %c1 iter_args(%arg5 = %c0_i32) -> (i32) {\n    %9 = dataflow.execution : i32 {\n      %10 = dataflow.addr %arg3[%arg4] {memShape = [1024]} : memref<1024xi32>[index] -> i32\n      %11 = dataflow.load %10 : i32 -> i32\n      %12 = arith.cmpi ne, %11, %c0_i32 : i32\n      %13 = arith.addi %arg5, %11 : i32\n      %14 = dataflow.select %12, %13, %arg5 : i32\n      %15 = arith.addi %arg4, %c1 {Exe = \"Loop\"} : index\n      %16 = arith.cmpi eq, %15, %c1024 {Exe = \"Loop\"} : index\n      dataflow.state %16, \"loop_exit\" or \"loop_back\" {Exe = \"Loop\"} : i1\n      dataflow.yield {execution_block = 1 : i32} %14 : i32\n    }\n    dataflow.yield %9 : i32\n  } {Loop_Band = 0 : i32, Loop_Level = 0 : i32}\n  dataflow.yield %8 : i32\n}",
            "isBlock": true,
            "line": 61,
            "name": "dataflow.task61",
            "operands": [],
            "regions": [
                [
                    {
                        "operations": [
                            "%8 = dataflow.for %arg4 = %c0 to %c1024 step %c1 iter_args(%arg5 = %c0_i32) -> (i32) {\n  %9 = dataflow.execution : i32 {\n    %10 = dataflow.addr %arg3[%arg4] {memShape = [1024]} : memref<1024xi32>[index] -> i32\n    %11 = dataflow.load %10 : i32 -> i32\n    %12 = arith.cmpi ne, %11, %c0_i32 : i32\n    %13 = arith.addi %arg5, %11 : i32\n    %14 = dataflow.select %12, %13, %arg5 : i32\n    %15 = arith.addi %arg4, %c1 {Exe = \"Loop\"} : index\n    %16 = arith.cmpi eq, %15, %c1024 {Exe = \"Loop\"} : index\n    dataflow.state %16, \"loop_exit\" or \"loop_back\" {Exe = \"Loop\"} : i1\n    dataflow.yield {execution_block = 1 : i32} %14 : i32\n  }\n  dataflow.yield %9 : i32\n} {Loop_Band = 0 : i32, Loop_Level = 0 : i32}",
                            "dataflow.yield %8 : i32"
                        ]
                    }
                ]
            ],
            "result_types": [
                "i32"
            ],
            "to": [
                "arith.addi64"
            ]
        },
        {
            "from": [
                "dataflow.task19",
                "dataflow.task33"
            ],
            "instance": "%5 = arith.addi %1, %2 : i32",
            "isBlock": false,
            "line": 78,
            "name": "arith.addi62",
            "operands": [
                "%1 = dataflow.task : i32 {\n  %8 = dataflow.for %arg4 = %c0 to %c1024 step %c1 iter_args(%arg5 = %c0_i32) -> (i32) {\n    %9 = dataflow.execution : i32 {\n      %10 = dataflow.addr %arg0[%arg4] {memShape = [1024]} : memref<1024xi32>[index] -> i32\n      %11 = dataflow.load %10 : i32 -> i32\n      %12 = arith.cmpi ne, %11, %c0_i32 : i32\n      %13 = arith.addi %arg5, %11 : i32\n      %14 = dataflow.select %12, %13, %arg5 : i32\n      %15 = arith.addi %arg4, %c1 {Exe = \"Loop\"} : index\n      %16 = arith.cmpi eq, %15, %c1024 {Exe = \"Loop\"} : index\n      dataflow.state %16, \"loop_exit\" or \"loop_back\" {Exe = \"Loop\"} : i1\n      dataflow.yield {execution_block = 1 : i32} %14 : i32\n    }\n    dataflow.yield %9 : i32\n  } {Loop_Band = 3 : i32, Loop_Level = 0 : i32}\n  dataflow.yield %8 : i32\n}",
                "%2 = dataflow.task : i32 {\n  %8 = dataflow.for %arg4 = %c0 to %c1024 step %c1 iter_args(%arg5 = %c0_i32) -> (i32) {\n    %9 = dataflow.execution : i32 {\n      %10 = dataflow.addr %arg1[%arg4] {memShape = [1024]} : memref<1024xi32>[index] -> i32\n      %11 = dataflow.load %10 : i32 -> i32\n      %12 = arith.cmpi ne, %11, %c0_i32 : i32\n      %13 = arith.addi %arg5, %11 : i32\n      %14 = dataflow.select %12, %13, %arg5 : i32\n      %15 = arith.addi %arg4, %c1 {Exe = \"Loop\"} : index\n      %16 = arith.cmpi eq, %15, %c1024 {Exe = \"Loop\"} : index\n      dataflow.state %16, \"loop_exit\" or \"loop_back\" {Exe = \"Loop\"} : i1\n      dataflow.yield {execution_block = 1 : i32} %14 : i32\n    }\n    dataflow.yield %9 : i32\n  } {Loop_Band = 2 : i32, Loop_Level = 0 : i32}\n  dataflow.yield %8 : i32\n}"
            ],
            "result_types": [
                "i32"
            ],
            "to": [
                "arith.addi63"
            ]
        },
        {
            "from": [
                "arith.addi62",
                "dataflow.task47"
            ],
            "instance": "%6 = arith.addi %5, %3 : i32",
            "isBlock": false,
            "line": 79,
            "name": "arith.addi63",
            "operands": [
                "%5 = arith.addi %1, %2 : i32",
                "%3 = dataflow.task : i32 {\n  %8 = dataflow.for %arg4 = %c0 to %c1024 step %c1 iter_args(%arg5 = %c0_i32) -> (i32) {\n    %9 = dataflow.execution : i32 {\n      %10 = dataflow.addr %arg2[%arg4] {memShape = [1024]} : memref<1024xi32>[index] -> i32\n      %11 = dataflow.load %10 : i32 -> i32\n      %12 = arith.cmpi ne, %11, %c0_i32 : i32\n      %13 = arith.addi %arg5, %11 : i32\n      %14 = dataflow.select %12, %13, %arg5 : i32\n      %15 = arith.addi %arg4, %c1 {Exe = \"Loop\"} : index\n      %16 = arith.cmpi eq, %15, %c1024 {Exe = \"Loop\"} : index\n      dataflow.state %16, \"loop_exit\" or \"loop_back\" {Exe = \"Loop\"} : i1\n      dataflow.yield {execution_block = 1 : i32} %14 : i32\n    }\n    dataflow.yield %9 : i32\n  } {Loop_Band = 1 : i32, Loop_Level = 0 : i32}\n  dataflow.yield %8 : i32\n}"
            ],
            "result_types": [
                "i32"
            ],
            "to": [
                "arith.addi64"
            ]
        },
        {
            "from": [
                "arith.addi63",
                "dataflow.task61"
            ],
            "instance": "%7 = arith.addi %6, %4 : i32",
            "isBlock": false,
            "line": 80,
            "name": "arith.addi64",
            "operands": [
                "%6 = arith.addi %5, %3 : i32",
                "%4 = dataflow.task : i32 {\n  %8 = dataflow.for %arg4 = %c0 to %c1024 step %c1 iter_args(%arg5 = %c0_i32) -> (i32) {\n    %9 = dataflow.execution : i32 {\n      %10 = dataflow.addr %arg3[%arg4] {memShape = [1024]} : memref<1024xi32>[index] -> i32\n      %11 = dataflow.load %10 : i32 -> i32\n      %12 = arith.cmpi ne, %11, %c0_i32 : i32\n      %13 = arith.addi %arg5, %11 : i32\n      %14 = dataflow.select %12, %13, %arg5 : i32\n      %15 = arith.addi %arg4, %c1 {Exe = \"Loop\"} : index\n      %16 = arith.cmpi eq, %15, %c1024 {Exe = \"Loop\"} : index\n      dataflow.state %16, \"loop_exit\" or \"loop_back\" {Exe = \"Loop\"} : i1\n      dataflow.yield {execution_block = 1 : i32} %14 : i32\n    }\n    dataflow.yield %9 : i32\n  } {Loop_Band = 0 : i32, Loop_Level = 0 : i32}\n  dataflow.yield %8 : i32\n}"
            ],
            "result_types": [
                "i32"
            ],
            "to": [
                "dataflow.yield65"
            ]
        },
        {
            "from": [
                "arith.addi64"
            ],
            "instance": "dataflow.yield %7 : i32",
            "isBlock": false,
            "line": 81,
            "name": "dataflow.yield65",
            "operands": [
                "%7 = arith.addi %6, %4 : i32"
            ],
            "result_types": []
        },
        {
            "from": [],
            "instance": "%0 = dataflow.launch : i32 {\n  dataflow.state %true, \"loop_start\" or \"null\" {Enable = \"Loop_Start\"} : i1\n  %1 = dataflow.task : i32 {\n    %8 = dataflow.for %arg4 = %c0 to %c1024 step %c1 iter_args(%arg5 = %c0_i32) -> (i32) {\n      %9 = dataflow.execution : i32 {\n        %10 = dataflow.addr %arg0[%arg4] {memShape = [1024]} : memref<1024xi32>[index] -> i32\n        %11 = dataflow.load %10 : i32 -> i32\n        %12 = arith.cmpi ne, %11, %c0_i32 : i32\n        %13 = arith.addi %arg5, %11 : i32\n        %14 = dataflow.select %12, %13, %arg5 : i32\n        %15 = arith.addi %arg4, %c1 {Exe = \"Loop\"} : index\n        %16 = arith.cmpi eq, %15, %c1024 {Exe = \"Loop\"} : index\n        dataflow.state %16, \"loop_exit\" or \"loop_back\" {Exe = \"Loop\"} : i1\n        dataflow.yield {execution_block = 1 : i32} %14 : i32\n      }\n      dataflow.yield %9 : i32\n    } {Loop_Band = 3 : i32, Loop_Level = 0 : i32}\n    dataflow.yield %8 : i32\n  }\n  %2 = dataflow.task : i32 {\n    %8 = dataflow.for %arg4 = %c0 to %c1024 step %c1 iter_args(%arg5 = %c0_i32) -> (i32) {\n      %9 = dataflow.execution : i32 {\n        %10 = dataflow.addr %arg1[%arg4] {memShape = [1024]} : memref<1024xi32>[index] -> i32\n        %11 = dataflow.load %10 : i32 -> i32\n        %12 = arith.cmpi ne, %11, %c0_i32 : i32\n        %13 = arith.addi %arg5, %11 : i32\n        %14 = dataflow.select %12, %13, %arg5 : i32\n        %15 = arith.addi %arg4, %c1 {Exe = \"Loop\"} : index\n        %16 = arith.cmpi eq, %15, %c1024 {Exe = \"Loop\"} : index\n        dataflow.state %16, \"loop_exit\" or \"loop_back\" {Exe = \"Loop\"} : i1\n        dataflow.yield {execution_block = 1 : i32} %14 : i32\n      }\n      dataflow.yield %9 : i32\n    } {Loop_Band = 2 : i32, Loop_Level = 0 : i32}\n    dataflow.yield %8 : i32\n  }\n  %3 = dataflow.task : i32 {\n    %8 = dataflow.for %arg4 = %c0 to %c1024 step %c1 iter_args(%arg5 = %c0_i32) -> (i32) {\n      %9 = dataflow.execution : i32 {\n        %10 = dataflow.addr %arg2[%arg4] {memShape = [1024]} : memref<1024xi32>[index] -> i32\n        %11 = dataflow.load %10 : i32 -> i32\n        %12 = arith.cmpi ne, %11, %c0_i32 : i32\n        %13 = arith.addi %arg5, %11 : i32\n        %14 = dataflow.select %12, %13, %arg5 : i32\n        %15 = arith.addi %arg4, %c1 {Exe = \"Loop\"} : index\n        %16 = arith.cmpi eq, %15, %c1024 {Exe = \"Loop\"} : index\n        dataflow.state %16, \"loop_exit\" or \"loop_back\" {Exe = \"Loop\"} : i1\n        dataflow.yield {execution_block = 1 : i32} %14 : i32\n      }\n      dataflow.yield %9 : i32\n    } {Loop_Band = 1 : i32, Loop_Level = 0 : i32}\n    dataflow.yield %8 : i32\n  }\n  %4 = dataflow.task : i32 {\n    %8 = dataflow.for %arg4 = %c0 to %c1024 step %c1 iter_args(%arg5 = %c0_i32) -> (i32) {\n      %9 = dataflow.execution : i32 {\n        %10 = dataflow.addr %arg3[%arg4] {memShape = [1024]} : memref<1024xi32>[index] -> i32\n        %11 = dataflow.load %10 : i32 -> i32\n        %12 = arith.cmpi ne, %11, %c0_i32 : i32\n        %13 = arith.addi %arg5, %11 : i32\n        %14 = dataflow.select %12, %13, %arg5 : i32\n        %15 = arith.addi %arg4, %c1 {Exe = \"Loop\"} : index\n        %16 = arith.cmpi eq, %15, %c1024 {Exe = \"Loop\"} : index\n        dataflow.state %16, \"loop_exit\" or \"loop_back\" {Exe = \"Loop\"} : i1\n        dataflow.yield {execution_block = 1 : i32} %14 : i32\n      }\n      dataflow.yield %9 : i32\n    } {Loop_Band = 0 : i32, Loop_Level = 0 : i32}\n    dataflow.yield %8 : i32\n  }\n  %5 = arith.addi %1, %2 : i32\n  %6 = arith.addi %5, %3 : i32\n  %7 = arith.addi %6, %4 : i32\n  dataflow.yield %7 : i32\n}",
            "isBlock": true,
            "line": 8,
            "name": "dataflow.launch66",
            "operands": [],
            "regions": [
                [
                    {
                        "operations": [
                            "dataflow.state %true, \"loop_start\" or \"null\" {Enable = \"Loop_Start\"} : i1",
                            "%1 = dataflow.task : i32 {\n  %8 = dataflow.for %arg4 = %c0 to %c1024 step %c1 iter_args(%arg5 = %c0_i32) -> (i32) {\n    %9 = dataflow.execution : i32 {\n      %10 = dataflow.addr %arg0[%arg4] {memShape = [1024]} : memref<1024xi32>[index] -> i32\n      %11 = dataflow.load %10 : i32 -> i32\n      %12 = arith.cmpi ne, %11, %c0_i32 : i32\n      %13 = arith.addi %arg5, %11 : i32\n      %14 = dataflow.select %12, %13, %arg5 : i32\n      %15 = arith.addi %arg4, %c1 {Exe = \"Loop\"} : index\n      %16 = arith.cmpi eq, %15, %c1024 {Exe = \"Loop\"} : index\n      dataflow.state %16, \"loop_exit\" or \"loop_back\" {Exe = \"Loop\"} : i1\n      dataflow.yield {execution_block = 1 : i32} %14 : i32\n    }\n    dataflow.yield %9 : i32\n  } {Loop_Band = 3 : i32, Loop_Level = 0 : i32}\n  dataflow.yield %8 : i32\n}",
                            "%2 = dataflow.task : i32 {\n  %8 = dataflow.for %arg4 = %c0 to %c1024 step %c1 iter_args(%arg5 = %c0_i32) -> (i32) {\n    %9 = dataflow.execution : i32 {\n      %10 = dataflow.addr %arg1[%arg4] {memShape = [1024]} : memref<1024xi32>[index] -> i32\n      %11 = dataflow.load %10 : i32 -> i32\n      %12 = arith.cmpi ne, %11, %c0_i32 : i32\n      %13 = arith.addi %arg5, %11 : i32\n      %14 = dataflow.select %12, %13, %arg5 : i32\n      %15 = arith.addi %arg4, %c1 {Exe = \"Loop\"} : index\n      %16 = arith.cmpi eq, %15, %c1024 {Exe = \"Loop\"} : index\n      dataflow.state %16, \"loop_exit\" or \"loop_back\" {Exe = \"Loop\"} : i1\n      dataflow.yield {execution_block = 1 : i32} %14 : i32\n    }\n    dataflow.yield %9 : i32\n  } {Loop_Band = 2 : i32, Loop_Level = 0 : i32}\n  dataflow.yield %8 : i32\n}",
                            "%3 = dataflow.task : i32 {\n  %8 = dataflow.for %arg4 = %c0 to %c1024 step %c1 iter_args(%arg5 = %c0_i32) -> (i32) {\n    %9 = dataflow.execution : i32 {\n      %10 = dataflow.addr %arg2[%arg4] {memShape = [1024]} : memref<1024xi32>[index] -> i32\n      %11 = dataflow.load %10 : i32 -> i32\n      %12 = arith.cmpi ne, %11, %c0_i32 : i32\n      %13 = arith.addi %arg5, %11 : i32\n      %14 = dataflow.select %12, %13, %arg5 : i32\n      %15 = arith.addi %arg4, %c1 {Exe = \"Loop\"} : index\n      %16 = arith.cmpi eq, %15, %c1024 {Exe = \"Loop\"} : index\n      dataflow.state %16, \"loop_exit\" or \"loop_back\" {Exe = \"Loop\"} : i1\n      dataflow.yield {execution_block = 1 : i32} %14 : i32\n    }\n    dataflow.yield %9 : i32\n  } {Loop_Band = 1 : i32, Loop_Level = 0 : i32}\n  dataflow.yield %8 : i32\n}",
                            "%4 = dataflow.task : i32 {\n  %8 = dataflow.for %arg4 = %c0 to %c1024 step %c1 iter_args(%arg5 = %c0_i32) -> (i32) {\n    %9 = dataflow.execution : i32 {\n      %10 = dataflow.addr %arg3[%arg4] {memShape = [1024]} : memref<1024xi32>[index] -> i32\n      %11 = dataflow.load %10 : i32 -> i32\n      %12 = arith.cmpi ne, %11, %c0_i32 : i32\n      %13 = arith.addi %arg5, %11 : i32\n      %14 = dataflow.select %12, %13, %arg5 : i32\n      %15 = arith.addi %arg4, %c1 {Exe = \"Loop\"} : index\n      %16 = arith.cmpi eq, %15, %c1024 {Exe = \"Loop\"} : index\n      dataflow.state %16, \"loop_exit\" or \"loop_back\" {Exe = \"Loop\"} : i1\n      dataflow.yield {execution_block = 1 : i32} %14 : i32\n    }\n    dataflow.yield %9 : i32\n  } {Loop_Band = 0 : i32, Loop_Level = 0 : i32}\n  dataflow.yield %8 : i32\n}",
                            "%5 = arith.addi %1, %2 : i32",
                            "%6 = arith.addi %5, %3 : i32",
                            "%7 = arith.addi %6, %4 : i32",
                            "dataflow.yield %7 : i32"
                        ]
                    }
                ]
            ],
            "result_types": [
                "i32"
            ],
            "to": [
                "func.return67"
            ]
        },
        {
            "from": [
                "dataflow.launch66"
            ],
            "instance": "func.return %0 : i32",
            "isBlock": false,
            "line": 83,
            "name": "func.return67",
            "operands": [
                "%0 = dataflow.launch : i32 {\n  dataflow.state %true, \"loop_start\" or \"null\" {Enable = \"Loop_Start\"} : i1\n  %1 = dataflow.task : i32 {\n    %8 = dataflow.for %arg4 = %c0 to %c1024 step %c1 iter_args(%arg5 = %c0_i32) -> (i32) {\n      %9 = dataflow.execution : i32 {\n        %10 = dataflow.addr %arg0[%arg4] {memShape = [1024]} : memref<1024xi32>[index] -> i32\n        %11 = dataflow.load %10 : i32 -> i32\n        %12 = arith.cmpi ne, %11, %c0_i32 : i32\n        %13 = arith.addi %arg5, %11 : i32\n        %14 = dataflow.select %12, %13, %arg5 : i32\n        %15 = arith.addi %arg4, %c1 {Exe = \"Loop\"} : index\n        %16 = arith.cmpi eq, %15, %c1024 {Exe = \"Loop\"} : index\n        dataflow.state %16, \"loop_exit\" or \"loop_back\" {Exe = \"Loop\"} : i1\n        dataflow.yield {execution_block = 1 : i32} %14 : i32\n      }\n      dataflow.yield %9 : i32\n    } {Loop_Band = 3 : i32, Loop_Level = 0 : i32}\n    dataflow.yield %8 : i32\n  }\n  %2 = dataflow.task : i32 {\n    %8 = dataflow.for %arg4 = %c0 to %c1024 step %c1 iter_args(%arg5 = %c0_i32) -> (i32) {\n      %9 = dataflow.execution : i32 {\n        %10 = dataflow.addr %arg1[%arg4] {memShape = [1024]} : memref<1024xi32>[index] -> i32\n        %11 = dataflow.load %10 : i32 -> i32\n        %12 = arith.cmpi ne, %11, %c0_i32 : i32\n        %13 = arith.addi %arg5, %11 : i32\n        %14 = dataflow.select %12, %13, %arg5 : i32\n        %15 = arith.addi %arg4, %c1 {Exe = \"Loop\"} : index\n        %16 = arith.cmpi eq, %15, %c1024 {Exe = \"Loop\"} : index\n        dataflow.state %16, \"loop_exit\" or \"loop_back\" {Exe = \"Loop\"} : i1\n        dataflow.yield {execution_block = 1 : i32} %14 : i32\n      }\n      dataflow.yield %9 : i32\n    } {Loop_Band = 2 : i32, Loop_Level = 0 : i32}\n    dataflow.yield %8 : i32\n  }\n  %3 = dataflow.task : i32 {\n    %8 = dataflow.for %arg4 = %c0 to %c1024 step %c1 iter_args(%arg5 = %c0_i32) -> (i32) {\n      %9 = dataflow.execution : i32 {\n        %10 = dataflow.addr %arg2[%arg4] {memShape = [1024]} : memref<1024xi32>[index] -> i32\n        %11 = dataflow.load %10 : i32 -> i32\n        %12 = arith.cmpi ne, %11, %c0_i32 : i32\n        %13 = arith.addi %arg5, %11 : i32\n        %14 = dataflow.select %12, %13, %arg5 : i32\n        %15 = arith.addi %arg4, %c1 {Exe = \"Loop\"} : index\n        %16 = arith.cmpi eq, %15, %c1024 {Exe = \"Loop\"} : index\n        dataflow.state %16, \"loop_exit\" or \"loop_back\" {Exe = \"Loop\"} : i1\n        dataflow.yield {execution_block = 1 : i32} %14 : i32\n      }\n      dataflow.yield %9 : i32\n    } {Loop_Band = 1 : i32, Loop_Level = 0 : i32}\n    dataflow.yield %8 : i32\n  }\n  %4 = dataflow.task : i32 {\n    %8 = dataflow.for %arg4 = %c0 to %c1024 step %c1 iter_args(%arg5 = %c0_i32) -> (i32) {\n      %9 = dataflow.execution : i32 {\n        %10 = dataflow.addr %arg3[%arg4] {memShape = [1024]} : memref<1024xi32>[index] -> i32\n        %11 = dataflow.load %10 : i32 -> i32\n        %12 = arith.cmpi ne, %11, %c0_i32 : i32\n        %13 = arith.addi %arg5, %11 : i32\n        %14 = dataflow.select %12, %13, %arg5 : i32\n        %15 = arith.addi %arg4, %c1 {Exe = \"Loop\"} : index\n        %16 = arith.cmpi eq, %15, %c1024 {Exe = \"Loop\"} : index\n        dataflow.state %16, \"loop_exit\" or \"loop_back\" {Exe = \"Loop\"} : i1\n        dataflow.yield {execution_block = 1 : i32} %14 : i32\n      }\n      dataflow.yield %9 : i32\n    } {Loop_Band = 0 : i32, Loop_Level = 0 : i32}\n    dataflow.yield %8 : i32\n  }\n  %5 = arith.addi %1, %2 : i32\n  %6 = arith.addi %5, %3 : i32\n  %7 = arith.addi %6, %4 : i32\n  dataflow.yield %7 : i32\n}"
            ],
            "result_types": []
        },
        {
            "from": [],
            "instance": "func.func @matrix_add(%arg0: memref<1024xi32>, %arg1: memref<1024xi32>, %arg2: memref<1024xi32>, %arg3: memref<1024xi32>) -> i32 attributes {llvm.linkage = #llvm.linkage<external>} {\n  %c1 = arith.constant 1 : index\n  %c1024 = arith.constant 1024 : index\n  %c0 = arith.constant 0 : index\n  %c0_i32 = arith.constant 0 : i32\n  %true = arith.constant true\n  %0 = dataflow.launch : i32 {\n    dataflow.state %true, \"loop_start\" or \"null\" {Enable = \"Loop_Start\"} : i1\n    %1 = dataflow.task : i32 {\n      %8 = dataflow.for %arg4 = %c0 to %c1024 step %c1 iter_args(%arg5 = %c0_i32) -> (i32) {\n        %9 = dataflow.execution : i32 {\n          %10 = dataflow.addr %arg0[%arg4] {memShape = [1024]} : memref<1024xi32>[index] -> i32\n          %11 = dataflow.load %10 : i32 -> i32\n          %12 = arith.cmpi ne, %11, %c0_i32 : i32\n          %13 = arith.addi %arg5, %11 : i32\n          %14 = dataflow.select %12, %13, %arg5 : i32\n          %15 = arith.addi %arg4, %c1 {Exe = \"Loop\"} : index\n          %16 = arith.cmpi eq, %15, %c1024 {Exe = \"Loop\"} : index\n          dataflow.state %16, \"loop_exit\" or \"loop_back\" {Exe = \"Loop\"} : i1\n          dataflow.yield {execution_block = 1 : i32} %14 : i32\n        }\n        dataflow.yield %9 : i32\n      } {Loop_Band = 3 : i32, Loop_Level = 0 : i32}\n      dataflow.yield %8 : i32\n    }\n    %2 = dataflow.task : i32 {\n      %8 = dataflow.for %arg4 = %c0 to %c1024 step %c1 iter_args(%arg5 = %c0_i32) -> (i32) {\n        %9 = dataflow.execution : i32 {\n          %10 = dataflow.addr %arg1[%arg4] {memShape = [1024]} : memref<1024xi32>[index] -> i32\n          %11 = dataflow.load %10 : i32 -> i32\n          %12 = arith.cmpi ne, %11, %c0_i32 : i32\n          %13 = arith.addi %arg5, %11 : i32\n          %14 = dataflow.select %12, %13, %arg5 : i32\n          %15 = arith.addi %arg4, %c1 {Exe = \"Loop\"} : index\n          %16 = arith.cmpi eq, %15, %c1024 {Exe = \"Loop\"} : index\n          dataflow.state %16, \"loop_exit\" or \"loop_back\" {Exe = \"Loop\"} : i1\n          dataflow.yield {execution_block = 1 : i32} %14 : i32\n        }\n        dataflow.yield %9 : i32\n      } {Loop_Band = 2 : i32, Loop_Level = 0 : i32}\n      dataflow.yield %8 : i32\n    }\n    %3 = dataflow.task : i32 {\n      %8 = dataflow.for %arg4 = %c0 to %c1024 step %c1 iter_args(%arg5 = %c0_i32) -> (i32) {\n        %9 = dataflow.execution : i32 {\n          %10 = dataflow.addr %arg2[%arg4] {memShape = [1024]} : memref<1024xi32>[index] -> i32\n          %11 = dataflow.load %10 : i32 -> i32\n          %12 = arith.cmpi ne, %11, %c0_i32 : i32\n          %13 = arith.addi %arg5, %11 : i32\n          %14 = dataflow.select %12, %13, %arg5 : i32\n          %15 = arith.addi %arg4, %c1 {Exe = \"Loop\"} : index\n          %16 = arith.cmpi eq, %15, %c1024 {Exe = \"Loop\"} : index\n          dataflow.state %16, \"loop_exit\" or \"loop_back\" {Exe = \"Loop\"} : i1\n          dataflow.yield {execution_block = 1 : i32} %14 : i32\n        }\n        dataflow.yield %9 : i32\n      } {Loop_Band = 1 : i32, Loop_Level = 0 : i32}\n      dataflow.yield %8 : i32\n    }\n    %4 = dataflow.task : i32 {\n      %8 = dataflow.for %arg4 = %c0 to %c1024 step %c1 iter_args(%arg5 = %c0_i32) -> (i32) {\n        %9 = dataflow.execution : i32 {\n          %10 = dataflow.addr %arg3[%arg4] {memShape = [1024]} : memref<1024xi32>[index] -> i32\n          %11 = dataflow.load %10 : i32 -> i32\n          %12 = arith.cmpi ne, %11, %c0_i32 : i32\n          %13 = arith.addi %arg5, %11 : i32\n          %14 = dataflow.select %12, %13, %arg5 : i32\n          %15 = arith.addi %arg4, %c1 {Exe = \"Loop\"} : index\n          %16 = arith.cmpi eq, %15, %c1024 {Exe = \"Loop\"} : index\n          dataflow.state %16, \"loop_exit\" or \"loop_back\" {Exe = \"Loop\"} : i1\n          dataflow.yield {execution_block = 1 : i32} %14 : i32\n        }\n        dataflow.yield %9 : i32\n      } {Loop_Band = 0 : i32, Loop_Level = 0 : i32}\n      dataflow.yield %8 : i32\n    }\n    %5 = arith.addi %1, %2 : i32\n    %6 = arith.addi %5, %3 : i32\n    %7 = arith.addi %6, %4 : i32\n    dataflow.yield %7 : i32\n  }\n  return %0 : i32\n}",
            "isBlock": true,
            "line": 2,
            "name": "func.func68",
            "operands": [],
            "regions": [
                [
                    {
                        "operations": [
                            "%c1 = arith.constant 1 : index",
                            "%c1024 = arith.constant 1024 : index",
                            "%c0 = arith.constant 0 : index",
                            "%c0_i32 = arith.constant 0 : i32",
                            "%true = arith.constant true",
                            "%0 = dataflow.launch : i32 {\n  dataflow.state %true, \"loop_start\" or \"null\" {Enable = \"Loop_Start\"} : i1\n  %1 = dataflow.task : i32 {\n    %8 = dataflow.for %arg4 = %c0 to %c1024 step %c1 iter_args(%arg5 = %c0_i32) -> (i32) {\n      %9 = dataflow.execution : i32 {\n        %10 = dataflow.addr %arg0[%arg4] {memShape = [1024]} : memref<1024xi32>[index] -> i32\n        %11 = dataflow.load %10 : i32 -> i32\n        %12 = arith.cmpi ne, %11, %c0_i32 : i32\n        %13 = arith.addi %arg5, %11 : i32\n        %14 = dataflow.select %12, %13, %arg5 : i32\n        %15 = arith.addi %arg4, %c1 {Exe = \"Loop\"} : index\n        %16 = arith.cmpi eq, %15, %c1024 {Exe = \"Loop\"} : index\n        dataflow.state %16, \"loop_exit\" or \"loop_back\" {Exe = \"Loop\"} : i1\n        dataflow.yield {execution_block = 1 : i32} %14 : i32\n      }\n      dataflow.yield %9 : i32\n    } {Loop_Band = 3 : i32, Loop_Level = 0 : i32}\n    dataflow.yield %8 : i32\n  }\n  %2 = dataflow.task : i32 {\n    %8 = dataflow.for %arg4 = %c0 to %c1024 step %c1 iter_args(%arg5 = %c0_i32) -> (i32) {\n      %9 = dataflow.execution : i32 {\n        %10 = dataflow.addr %arg1[%arg4] {memShape = [1024]} : memref<1024xi32>[index] -> i32\n        %11 = dataflow.load %10 : i32 -> i32\n        %12 = arith.cmpi ne, %11, %c0_i32 : i32\n        %13 = arith.addi %arg5, %11 : i32\n        %14 = dataflow.select %12, %13, %arg5 : i32\n        %15 = arith.addi %arg4, %c1 {Exe = \"Loop\"} : index\n        %16 = arith.cmpi eq, %15, %c1024 {Exe = \"Loop\"} : index\n        dataflow.state %16, \"loop_exit\" or \"loop_back\" {Exe = \"Loop\"} : i1\n        dataflow.yield {execution_block = 1 : i32} %14 : i32\n      }\n      dataflow.yield %9 : i32\n    } {Loop_Band = 2 : i32, Loop_Level = 0 : i32}\n    dataflow.yield %8 : i32\n  }\n  %3 = dataflow.task : i32 {\n    %8 = dataflow.for %arg4 = %c0 to %c1024 step %c1 iter_args(%arg5 = %c0_i32) -> (i32) {\n      %9 = dataflow.execution : i32 {\n        %10 = dataflow.addr %arg2[%arg4] {memShape = [1024]} : memref<1024xi32>[index] -> i32\n        %11 = dataflow.load %10 : i32 -> i32\n        %12 = arith.cmpi ne, %11, %c0_i32 : i32\n        %13 = arith.addi %arg5, %11 : i32\n        %14 = dataflow.select %12, %13, %arg5 : i32\n        %15 = arith.addi %arg4, %c1 {Exe = \"Loop\"} : index\n        %16 = arith.cmpi eq, %15, %c1024 {Exe = \"Loop\"} : index\n        dataflow.state %16, \"loop_exit\" or \"loop_back\" {Exe = \"Loop\"} : i1\n        dataflow.yield {execution_block = 1 : i32} %14 : i32\n      }\n      dataflow.yield %9 : i32\n    } {Loop_Band = 1 : i32, Loop_Level = 0 : i32}\n    dataflow.yield %8 : i32\n  }\n  %4 = dataflow.task : i32 {\n    %8 = dataflow.for %arg4 = %c0 to %c1024 step %c1 iter_args(%arg5 = %c0_i32) -> (i32) {\n      %9 = dataflow.execution : i32 {\n        %10 = dataflow.addr %arg3[%arg4] {memShape = [1024]} : memref<1024xi32>[index] -> i32\n        %11 = dataflow.load %10 : i32 -> i32\n        %12 = arith.cmpi ne, %11, %c0_i32 : i32\n        %13 = arith.addi %arg5, %11 : i32\n        %14 = dataflow.select %12, %13, %arg5 : i32\n        %15 = arith.addi %arg4, %c1 {Exe = \"Loop\"} : index\n        %16 = arith.cmpi eq, %15, %c1024 {Exe = \"Loop\"} : index\n        dataflow.state %16, \"loop_exit\" or \"loop_back\" {Exe = \"Loop\"} : i1\n        dataflow.yield {execution_block = 1 : i32} %14 : i32\n      }\n      dataflow.yield %9 : i32\n    } {Loop_Band = 0 : i32, Loop_Level = 0 : i32}\n    dataflow.yield %8 : i32\n  }\n  %5 = arith.addi %1, %2 : i32\n  %6 = arith.addi %5, %3 : i32\n  %7 = arith.addi %6, %4 : i32\n  dataflow.yield %7 : i32\n}",
                            "func.return %0 : i32"
                        ]
                    }
                ]
            ],
            "result_types": []
        }
    ],
    "LoopInfo": {
        "band0": {
            "loop_level": 0,
            "lower_bound": 0,
            "step": 1,
            "unroll_factor": {
                "max": 1024,
                "min": 1
            },
            "upper_bound": 1024,
            "vector_factor": {
                "max": 1024,
                "min": 1
            }
        },
        "band1": {
            "loop_level": 0,
            "lower_bound": 0,
            "step": 1,
            "unroll_factor": {
                "max": 1024,
                "min": 1
            },
            "upper_bound": 1024,
            "vector_factor": {
                "max": 1024,
                "min": 1
            }
        },
        "band2": {
            "loop_level": 0,
            "lower_bound": 0,
            "step": 1,
            "unroll_factor": {
                "max": 1024,
                "min": 1
            },
            "upper_bound": 1024,
            "vector_factor": {
                "max": 1024,
                "min": 1
            }
        },
        "band3": {
            "loop_level": 0,
            "lower_bound": 0,
            "step": 1,
            "unroll_factor": {
                "max": 1024,
                "min": 1
            },
            "upper_bound": 1024,
            "vector_factor": {
                "max": 1024,
                "min": 1
            }
        }
    },
    "operations": [
        "arith.constant",
        "arith.constant",
        "arith.constant",
        "arith.constant",
        "arith.constant",
        "dataflow.state",
        "dataflow.addr",
        "dataflow.load",
        "arith.cmpi",
        "arith.addi",
        "dataflow.select",
        "arith.addi",
        "arith.cmpi",
        "dataflow.state",
        "dataflow.yield",
        "dataflow.execution",
        "dataflow.yield",
        "dataflow.for",
        "dataflow.yield",
        "dataflow.task",
        "dataflow.addr",
        "dataflow.load",
        "arith.cmpi",
        "arith.addi",
        "dataflow.select",
        "arith.addi",
        "arith.cmpi",
        "dataflow.state",
        "dataflow.yield",
        "dataflow.execution",
        "dataflow.yield",
        "dataflow.for",
        "dataflow.yield",
        "dataflow.task",
        "dataflow.addr",
        "dataflow.load",
        "arith.cmpi",
        "arith.addi",
        "dataflow.select",
        "arith.addi",
        "arith.cmpi",
        "dataflow.state",
        "dataflow.yield",
        "dataflow.execution",
        "dataflow.yield",
        "dataflow.for",
        "dataflow.yield",
        "dataflow.task",
        "dataflow.addr",
        "dataflow.load",
        "arith.cmpi",
        "arith.addi",
        "dataflow.select",
        "arith.addi",
        "arith.cmpi",
        "dataflow.state",
        "dataflow.yield",
        "dataflow.execution",
        "dataflow.yield",
        "dataflow.for",
        "dataflow.yield",
        "dataflow.task",
        "arith.addi",
        "arith.addi",
        "arith.addi",
        "dataflow.yield",
        "dataflow.launch",
        "func.return",
        "func.func"
    ]
}